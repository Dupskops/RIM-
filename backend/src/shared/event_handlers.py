"""
Handlers robustos de eventos para integraci√≥n entre m√≥dulos.
Estos handlers orquestan la comunicaci√≥n entre m√≥dulos v√≠a Event Bus.
"""
import logging
from typing import Any
from datetime import datetime

from src.shared.event_bus import event_bus

logger = logging.getLogger(__name__)


# ============================================
# HANDLERS: SENSORES ‚Üí FALLAS
# ============================================

async def create_falla_from_sensor_alert(event: Any) -> None:
    """
    Crear falla autom√°ticamente cuando un sensor reporta valores cr√≠ticos.
    Evento escuchado: AlertaSensorEvent (sensores)
    Acci√≥n: Crear falla autom√°tica en m√≥dulo fallas
    """
    try:
        from src.fallas.use_cases import CreateFallaMLUseCase
        from src.fallas.schemas import FallaMLCreate
        from src.config.database import AsyncSessionLocal
        
        logger.warning(f"üîß Creando falla desde alerta de sensor {event.sensor_id}")
        
        # Solo crear falla si es severidad alta/cr√≠tica
        if event.severidad not in ["critical", "alta", "critica"]:
            logger.info("‚ÑπÔ∏è Severidad no cr√≠tica, no se crea falla autom√°tica")
            return
        
        async with AsyncSessionLocal() as db:
            use_case = CreateFallaMLUseCase()
            
            falla_data = FallaMLCreate(
                moto_id=event.moto_id,
                tipo=f"sensor_{event.tipo_sensor}",
                titulo=f"Alerta de sensor: {event.tipo_sensor}",
                descripcion=f"El sensor {event.tipo_sensor} ha detectado un valor fuera de rango.\n"
                           f"Valor: {event.valor}\n"
                           f"Umbral violado: {event.umbral_violado}",
                origen_ml="sensor_alert",
                confianza_ml=0.95,  # Alta confianza porque viene de sensor
                datos_ml={
                    "sensor_id": event.sensor_id,
                    "tipo_sensor": event.tipo_sensor,
                    "valor": event.valor,
                    "umbral": event.umbral_violado,
                    "severidad": event.severidad
                }
            )
            
            falla = await use_case.execute(db, falla_data)
            logger.info(f"‚úÖ Falla {falla.id} creada desde sensor alert")
            
    except Exception as e:
        logger.error(f"‚ùå Error creando falla desde sensor alert: {str(e)}", exc_info=True)


# ============================================
# HANDLERS: ML ‚Üí FALLAS
# ============================================

async def create_falla_from_ml_anomaly(event: Any) -> None:
    """
    Crear falla cuando ML detecta una anomal√≠a.
    Evento escuchado: AnomaliaDetectadaEvent (ml)
    Acci√≥n: Crear falla predictiva
    """
    try:
        from src.fallas.use_cases import CreateFallaMLUseCase
        from src.fallas.schemas import FallaMLCreate
        from src.config.database import AsyncSessionLocal
        
        logger.warning(f"ü§ñ Creando falla desde anomal√≠a ML en moto {event.moto_id}")
        
        async with AsyncSessionLocal() as db:
            use_case = CreateFallaMLUseCase()
            
            falla_data = FallaMLCreate(
                moto_id=event.moto_id,
                tipo=event.tipo_anomalia,
                titulo=f"Anomal√≠a detectada: {event.tipo_anomalia}",
                descripcion=f"El sistema de IA ha detectado un comportamiento anormal.\n"
                           f"Tipo: {event.tipo_anomalia}\n"
                           f"Severidad: {event.severidad}\n"
                           f"Recomendamos una revisi√≥n preventiva.",
                origen_ml="anomaly_detection",
                confianza_ml=event.confianza,
                datos_ml={
                    "tipo_anomalia": event.tipo_anomalia,
                    "severidad": event.severidad,
                    "datos_sensor": event.datos_sensor
                }
            )
            
            falla = await use_case.execute(db, falla_data)
            logger.info(f"‚úÖ Falla predictiva {falla.id} creada desde ML")
            
    except Exception as e:
        logger.error(f"‚ùå Error creando falla desde ML: {str(e)}", exc_info=True)


# ============================================
# HANDLERS: FALLAS ‚Üí MANTENIMIENTO
# ============================================

async def create_mantenimiento_from_critical_fault(event: Any) -> None:
    """
    Crear orden de mantenimiento urgente cuando se detecta falla cr√≠tica.
    Evento escuchado: FallaCriticaEvent (fallas)
    Acci√≥n: Crear mantenimiento urgente
    """
    try:
        from src.mantenimiento.use_cases import CreateMantenimientoUseCase
        from src.mantenimiento.schemas import MantenimientoCreate
        from src.config.database import AsyncSessionLocal
        from src.shared.constants import TipoMantenimiento, EstadoMantenimiento
        from datetime import date, timedelta
        
        logger.critical(f"üîß Creando mantenimiento urgente desde falla cr√≠tica {event.falla_id}")
        
        async with AsyncSessionLocal() as db:
            use_case = CreateMantenimientoUseCase()
            
            mantenimiento_data = MantenimientoCreate(
                moto_id=event.moto_id,
                tipo=TipoMantenimiento.CORRECTIVO,
                titulo=f"Mantenimiento urgente: {event.titulo}",
                descripcion=f"Mantenimiento requerido por falla cr√≠tica.\n\n"
                           f"Falla: {event.titulo}\n"
                           f"{event.descripcion}\n\n"
                           f"{'‚ö†Ô∏è NO CONDUCIR LA MOTO' if not event.puede_conducir else 'Atenci√≥n inmediata requerida'}",
                fecha_programada=date.today() + timedelta(days=1),  # Ma√±ana
                prioridad=5,  # M√°xima prioridad
                costo_estimado=0.0,  # A determinar
                notas=f"Generado autom√°ticamente por falla cr√≠tica #{event.falla_id}"
            )
            
            mantenimiento = await use_case.execute(db, mantenimiento_data)
            logger.info(f"‚úÖ Mantenimiento urgente {mantenimiento.id} creado")
            
    except Exception as e:
        logger.error(f"‚ùå Error creando mantenimiento urgente: {str(e)}", exc_info=True)


async def create_mantenimiento_from_ml_prediction(event: Any) -> None:
    """
    Crear mantenimiento preventivo desde recomendaci√≥n de ML.
    Evento escuchado: PrediccionGeneradaEvent (ml)
    Acci√≥n: Crear mantenimiento preventivo si es cr√≠tica
    """
    try:
        if not event.es_critica:
            logger.info("‚ÑπÔ∏è Predicci√≥n no cr√≠tica, no se crea mantenimiento")
            return
            
        from src.mantenimiento.use_cases import CreateMantenimientoMLUseCase
        from src.mantenimiento.schemas import MantenimientoMLCreate
        from src.config.database import AsyncSessionLocal
        
        logger.info(f"ü§ñ Creando mantenimiento preventivo desde predicci√≥n ML")
        
        async with AsyncSessionLocal() as db:
            use_case = CreateMantenimientoMLUseCase()
            
            mantenimiento_data = MantenimientoMLCreate(
                moto_id=event.moto_id,
                tipo_recomendado=event.tipo,
                razon=event.descripcion,
                confianza=event.confianza,
                datos_ia=event.datos,
                prioridad=5 if event.es_critica else 3
            )
            
            mantenimiento = await use_case.execute(db, mantenimiento_data)
            logger.info(f"‚úÖ Mantenimiento preventivo {mantenimiento.id} creado desde ML")
            
    except Exception as e:
        logger.error(f"‚ùå Error creando mantenimiento desde ML: {str(e)}", exc_info=True)


# ============================================
# HANDLERS: VARIOS ‚Üí NOTIFICACIONES
# ============================================

async def send_notification_for_critical_fault(event: Any) -> None:
    """
    Enviar notificaci√≥n urgente por falla cr√≠tica.
    Evento escuchado: FallaCriticaEvent (fallas)
    """
    logger.critical(f"üö® Enviando notificaci√≥n de falla cr√≠tica {event.falla_id}")
    # La l√≥gica de notificaci√≥n se maneja en el m√≥dulo de notificaciones
    # Este handler solo registra el evento para auditor√≠a
    logger.info(f"‚úÖ Notificaci√≥n de falla cr√≠tica procesada")


async def send_notification_for_sensor_alert(event: Any) -> None:
    """
    Enviar notificaci√≥n por alerta de sensor.
    Evento escuchado: AlertaSensorEvent (sensores)
    """
    logger.warning(f"üì° Enviando notificaci√≥n de alerta de sensor {event.sensor_id}")
    logger.info(f"‚úÖ Notificaci√≥n de sensor procesada")


async def send_notification_for_maintenance_urgent(event: Any) -> None:
    """
    Enviar notificaci√≥n por mantenimiento urgente.
    Evento escuchado: MantenimientoUrgenteEvent (mantenimiento)
    """
    logger.warning(f"üîß Enviando notificaci√≥n de mantenimiento urgente")
    logger.info(f"‚úÖ Notificaci√≥n de mantenimiento procesada")


async def send_notification_for_ml_prediction(event: Any) -> None:
    """
    Enviar notificaci√≥n preventiva por predicci√≥n ML.
    Evento escuchado: PrediccionGeneradaEvent (ml)
    """
    logger.info(f"ü§ñ Enviando notificaci√≥n de predicci√≥n ML")
    logger.info(f"‚úÖ Notificaci√≥n de predicci√≥n procesada")


# ============================================
# HANDLERS: ML FEEDBACK LOOP
# ============================================

async def feed_ml_model_from_sensor_reading(event: Any) -> None:
    """
    Alimentar modelos ML con lecturas de sensores.
    Evento escuchado: LecturaRegistradaEvent (sensores)
    """
    try:
        logger.debug(f"ü§ñ Alimentando ML con lectura de sensor {event.sensor_id}")
        # Aqu√≠ se implementar√≠a la l√≥gica para enviar datos al modelo ML
        # Por ahora solo logging
        
    except Exception as e:
        logger.error(f"‚ùå Error alimentando ML: {str(e)}")


async def update_ml_model_from_fault_resolution(event: Any) -> None:
    """
    Actualizar modelos ML cuando se resuelve una falla.
    Evento escuchado: FallaResueltaEvent (fallas)
    Prop√≥sito: Feedback loop para mejorar predicciones
    """
    try:
        logger.info(f"ü§ñ Actualizando ML con resoluci√≥n de falla {event.falla_id}")
        # Aqu√≠ se implementar√≠a la l√≥gica para feedback al modelo
        # Por ahora solo logging
        
    except Exception as e:
        logger.error(f"‚ùå Error actualizando ML: {str(e)}")


# ============================================
# HANDLERS: MOTOS ‚Üí MANTENIMIENTO
# ============================================

async def check_maintenance_on_kilometraje_update(event: Any) -> None:
    """
    Verificar mantenimientos pendientes cuando se actualiza el kilometraje.
    Evento escuchado: KilometrajeUpdatedEvent (motos)
    """
    try:
        logger.info(f"üîß Verificando mantenimientos para moto {event.moto_id}")
        # Aqu√≠ se verificar√≠an los mantenimientos basados en kilometraje
        # Por ejemplo: cambio de aceite cada 5000km
        
        if event.new_kilometraje % 5000 == 0:
            logger.warning(f"‚ö†Ô∏è Moto {event.moto_id} alcanz√≥ {event.new_kilometraje}km - verificar mantenimiento")
            
    except Exception as e:
        logger.error(f"‚ùå Error verificando mantenimientos: {str(e)}")


# ============================================
# HANDLERS: AUTH ‚Üí NOTIFICACIONES
# ============================================

async def send_welcome_email(event: Any) -> None:
    """
    Enviar email de bienvenida cuando se registra un usuario.
    Evento escuchado: UserRegisteredEvent (auth)
    """
    logger.info(f"üìß Enviando email de bienvenida a {event.email}")
    logger.info(f"‚úÖ Email de bienvenida procesado")


async def send_password_reset_email(event: Any) -> None:
    """
    Enviar email con token de recuperaci√≥n de contrase√±a.
    Evento escuchado: PasswordResetRequestedEvent (auth)
    """
    logger.info(f"üìß Enviando email de reset password a {event.email}")
    logger.info(f"‚úÖ Email de reset password procesado")


# ============================================
# HANDLERS: SUSCRIPCIONES ‚Üí NOTIFICACIONES
# ============================================

async def send_subscription_upgrade_confirmation(event: Any) -> None:
    """
    Confirmar upgrade de suscripci√≥n.
    Evento escuchado: SuscripcionUpgradedEvent (suscripciones)
    """
    logger.info(f"üí≥ Enviando confirmaci√≥n de upgrade a usuario {event.usuario_id}")
    logger.info(f"‚úÖ Confirmaci√≥n de upgrade procesada")


async def send_subscription_expiration_reminder(event: Any) -> None:
    """
    Recordar renovaci√≥n de suscripci√≥n.
    Evento escuchado: SuscripcionExpiredEvent (suscripciones)
    """
    logger.warning(f"üí≥ Enviando recordatorio de renovaci√≥n a usuario {event.usuario_id}")
    logger.info(f"‚úÖ Recordatorio de renovaci√≥n procesado")


# ============================================
# HANDLERS: CHATBOT ‚Üí NOTIFICACIONES
# ============================================

async def send_limit_reached_notification(event: Any) -> None:
    """
    Notificar cuando se alcanza l√≠mite de plan freemium.
    Evento escuchado: LimiteAlcanzadoEvent (chatbot)
    """
    logger.info(f"‚ö†Ô∏è Enviando notificaci√≥n de l√≠mite alcanzado a usuario {event.usuario_id}")
    logger.info(f"‚úÖ Notificaci√≥n de l√≠mite procesada")


# ============================================
# HANDLER REGISTRY (para debugging)
# ============================================

REGISTERED_HANDLERS = {
    # Sensores ‚Üí Fallas
    "AlertaSensorEvent": ["create_falla_from_sensor_alert", "send_notification_for_sensor_alert"],
    
    # ML ‚Üí Fallas
    "AnomaliaDetectadaEvent": ["create_falla_from_ml_anomaly"],
    
    # Fallas ‚Üí Mantenimiento
    "FallaCriticaEvent": ["create_mantenimiento_from_critical_fault", "send_notification_for_critical_fault"],
    
    # ML ‚Üí Mantenimiento
    "PrediccionGeneradaEvent": ["create_mantenimiento_from_ml_prediction", "send_notification_for_ml_prediction"],
    
    # Sensores ‚Üí ML
    "LecturaRegistradaEvent": ["feed_ml_model_from_sensor_reading"],
    
    # Fallas ‚Üí ML
    "FallaResueltaEvent": ["update_ml_model_from_fault_resolution"],
    
    # Motos ‚Üí Mantenimiento
    "KilometrajeUpdatedEvent": ["check_maintenance_on_kilometraje_update"],
    
    # Auth ‚Üí Notificaciones
    "UserRegisteredEvent": ["send_welcome_email"],
    "PasswordResetRequestedEvent": ["send_password_reset_email"],
    
    # Suscripciones ‚Üí Notificaciones
    "SuscripcionUpgradedEvent": ["send_subscription_upgrade_confirmation"],
    "SuscripcionExpiredEvent": ["send_subscription_expiration_reminder"],
    
    # Chatbot ‚Üí Notificaciones
    "LimiteAlcanzadoEvent": ["send_limit_reached_notification"],
}


def get_handler_stats() -> dict:
    """Obtener estad√≠sticas de handlers registrados."""
    total_events = len(REGISTERED_HANDLERS)
    total_handlers = sum(len(handlers) for handlers in REGISTERED_HANDLERS.values())
    
    return {
        "total_event_types": total_events,
        "total_handlers": total_handlers,
        "events": list(REGISTERED_HANDLERS.keys()),
        "registry": REGISTERED_HANDLERS
    }
