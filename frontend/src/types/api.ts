/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Registrar nuevo usuario
         * @description Crea una nueva cuenta de usuario con email y contraseña
         */
        post: operations["register_api_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Iniciar sesión
         * @description Autentica un usuario con email y contraseña
         */
        post: operations["login_api_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Renovar access token
         * @description Obtiene un nuevo access token usando un refresh token válido
         */
        post: operations["refresh_token_api_auth_refresh_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cerrar sesión
         * @description Revoca el refresh token actual
         */
        post: operations["logout_api_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cambiar contraseña
         * @description Cambia la contraseña del usuario autenticado
         */
        post: operations["change_password_api_auth_change_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/request-password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Solicitar reset de contraseña
         * @description Envía email con token para resetear contraseña
         */
        post: operations["request_password_reset_api_auth_request_password_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resetear contraseña
         * @description Resetea la contraseña usando el token recibido por email
         */
        post: operations["reset_password_api_auth_reset_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verificar email
         * @description Verifica el email del usuario usando el token recibido
         */
        post: operations["verify_email_api_auth_verify_email_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener perfil actual
         * @description Retorna los datos del usuario autenticado
         */
        get: operations["get_current_user_api_auth_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Actualizar perfil
         * @description Actualiza el perfil del usuario autenticado
         */
        patch: operations["update_profile_api_auth_me_patch"];
        trace?: never;
    };
    "/api/auth/validate-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Validar token
         * @description Verifica si un access token es válido
         */
        get: operations["validate_token_api_auth_validate_token_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/usuarios": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar usuarios
         * @description Lista usuarios con filtros y paginación (requiere permisos admin)
         */
        get: operations["list_usuarios_api_usuarios_get"];
        put?: never;
        /**
         * Crear usuario
         * @description Crea un nuevo usuario (requiere permisos admin)
         */
        post: operations["create_usuario_api_usuarios_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/usuarios/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estadísticas de usuarios
         * @description Obtiene estadísticas generales de usuarios (requiere permisos admin)
         */
        get: operations["get_usuario_stats_api_usuarios_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/usuarios/{usuario_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener usuario
         * @description Obtiene un usuario por ID (requiere permisos admin)
         */
        get: operations["get_usuario_api_usuarios__usuario_id__get"];
        put?: never;
        post?: never;
        /**
         * Eliminar usuario
         * @description Elimina un usuario (soft delete, requiere permisos admin)
         */
        delete: operations["delete_usuario_api_usuarios__usuario_id__delete"];
        options?: never;
        head?: never;
        /**
         * Actualizar usuario
         * @description Actualiza un usuario existente (requiere permisos admin)
         */
        patch: operations["update_usuario_api_usuarios__usuario_id__patch"];
        trace?: never;
    };
    "/api/usuarios/{usuario_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Desactivar usuario
         * @description Desactiva un usuario (requiere permisos admin)
         */
        post: operations["deactivate_usuario_api_usuarios__usuario_id__deactivate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/usuarios/{usuario_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activar usuario
         * @description Activa un usuario (requiere permisos admin)
         */
        post: operations["activate_usuario_api_usuarios__usuario_id__activate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/motos/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar motos
         * @description Lista motos con filtros y paginación.
         *
         *     - **Usuarios normales**: Solo ven sus propias motos
         *     - **Admins**: Pueden ver todas las motos y filtrar por usuario
         *
         *     Filtros disponibles:
         *     - **usuario_id**: ID del usuario (solo admins)
         *     - **modelo**: Búsqueda parcial por modelo
         *     - **año_desde/año_hasta**: Rango de años
         *     - **vin**: Buscar por VIN específico
         *     - **placa**: Buscar por placa específica
         *     - **page**: Número de página (default: 1)
         *     - **per_page**: Items por página (default: 20, max: 100)
         *     - **order_by**: Campo para ordenar (id, created_at, año, kilometraje, modelo)
         *     - **order_direction**: Dirección (asc, desc)
         */
        get: operations["list_motos_api_motos__get"];
        put?: never;
        /**
         * Registrar nueva moto
         * @description Registra una nueva moto KTM.
         *
         *     - **vin**: VIN de 17 caracteres (único)
         *     - **modelo**: Modelo de la moto (ej: Duke 390)
         *     - **año**: Año de fabricación (1990 - actual + 1)
         *     - **placa**: Placa de la moto (opcional, único)
         *     - **color**: Color de la moto (opcional)
         *     - **kilometraje**: Kilometraje actual (default: 0)
         *     - **observaciones**: Observaciones adicionales (opcional)
         */
        post: operations["register_moto_api_motos__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/motos/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estadísticas de motos (Admin)
         * @description Obtiene estadísticas de motos (solo admins).
         *
         *     Incluye:
         *     - Total de motos registradas
         *     - Motos por año de fabricación
         *     - Kilometraje promedio
         *     - Modelos más populares (top 10)
         */
        get: operations["get_moto_stats_api_motos_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/motos/{moto_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener moto por ID
         * @description Obtiene una moto por ID.
         *
         *     - **Usuarios normales**: Solo pueden ver sus propias motos
         *     - **Admins**: Pueden ver cualquier moto
         */
        get: operations["get_moto_api_motos__moto_id__get"];
        put?: never;
        post?: never;
        /**
         * Eliminar moto
         * @description Elimina una moto (soft delete).
         *
         *     - **Usuarios normales**: Solo pueden eliminar sus propias motos
         *     - **Admins**: Pueden eliminar cualquier moto
         */
        delete: operations["delete_moto_api_motos__moto_id__delete"];
        options?: never;
        head?: never;
        /**
         * Actualizar moto
         * @description Actualiza una moto (actualización parcial).
         *
         *     - **Usuarios normales**: Solo pueden actualizar sus propias motos
         *     - **Admins**: Pueden actualizar cualquier moto
         *
         *     Campos actualizables:
         *     - **placa**: Nueva placa (debe ser única)
         *     - **color**: Nuevo color
         *     - **kilometraje**: Nuevo kilometraje (debe ser >= actual)
         *     - **observaciones**: Nuevas observaciones
         */
        patch: operations["update_moto_api_motos__moto_id__patch"];
        trace?: never;
    };
    "/api/motos/{moto_id}/kilometraje": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Actualizar kilometraje
         * @description Actualiza solo el kilometraje de una moto.
         *
         *     - **Usuarios normales**: Solo pueden actualizar sus propias motos
         *     - **Admins**: Pueden actualizar cualquier moto
         *
         *     Validaciones:
         *     - El nuevo kilometraje debe ser >= al actual
         *     - El incremento no puede ser mayor a 100,000 km
         */
        patch: operations["update_kilometraje_api_motos__moto_id__kilometraje_patch"];
        trace?: never;
    };
    "/api/suscripciones/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar suscripciones
         * @description Lista suscripciones con filtros y paginación.
         *
         *     - **Usuarios normales**: Solo ven sus propias suscripciones
         *     - **Admins**: Pueden ver todas las suscripciones y filtrar por usuario
         *
         *     Filtros disponibles:
         *     - **usuario_id**: ID del usuario (solo admins)
         *     - **plan**: Tipo de plan (freemium/premium)
         *     - **status**: Estado (active/cancelled/expired/pending)
         *     - **activas_only**: Solo suscripciones activas
         *     - **page**: Número de página (default: 1)
         *     - **per_page**: Tamaño de página (default: 20, max: 100)
         *     - **order_by**: Campo para ordenar (id, created_at, start_date, end_date)
         *     - **order_direction**: Dirección (asc, desc)
         */
        get: operations["list_suscripciones_api_suscripciones__get"];
        put?: never;
        /**
         * Crear suscripción (Admin)
         * @description Crea una nueva suscripción (solo admins).
         *
         *     - **usuario_id**: ID del usuario
         *     - **plan**: Tipo de plan (freemium/premium)
         *     - **duracion_meses**: Duración en meses (solo premium, 1-24)
         *     - **precio**: Precio del plan (obligatorio para premium)
         *     - **metodo_pago**: Método de pago (obligatorio para premium)
         *     - **transaction_id**: ID de transacción (obligatorio para premium)
         *     - **auto_renovacion**: Auto-renovación automática
         *     - **notas**: Notas adicionales
         */
        post: operations["create_suscripcion_api_suscripciones__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suscripciones/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener mi suscripción activa
         * @description Obtiene la suscripción activa del usuario autenticado.
         */
        get: operations["get_my_suscripcion_api_suscripciones_me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suscripciones/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estadísticas de suscripciones (Admin)
         * @description Obtiene estadísticas de suscripciones (solo admins).
         *
         *     Incluye:
         *     - Total de suscripciones registradas
         *     - Suscripciones activas
         *     - Suscripciones freemium
         *     - Suscripciones premium
         *     - Ingresos totales
         *     - Tasa de conversión (% freemium → premium)
         */
        get: operations["get_suscripcion_stats_api_suscripciones_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suscripciones/{suscripcion_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener suscripción por ID
         * @description Obtiene una suscripción por ID.
         *
         *     - **Usuarios normales**: Solo pueden ver sus propias suscripciones
         *     - **Admins**: Pueden ver cualquier suscripción
         */
        get: operations["get_suscripcion_api_suscripciones__suscripcion_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suscripciones/upgrade": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upgrade a Premium
         * @description Realiza upgrade de freemium a premium.
         *
         *     - **duracion_meses**: Duración en meses (1-24)
         *     - **precio**: Precio del plan (> 0)
         *     - **metodo_pago**: Método de pago (tarjeta, paypal, transferencia, mercadopago, stripe)
         *     - **transaction_id**: ID de transacción del pago (único)
         *     - **auto_renovacion**: Si se renueva automáticamente
         */
        post: operations["upgrade_to_premium_api_suscripciones_upgrade_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suscripciones/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancelar suscripción
         * @description Cancela la suscripción activa del usuario.
         *
         *     - **razon**: Razón de cancelación (opcional)
         */
        post: operations["cancel_suscripcion_api_suscripciones_cancel_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/suscripciones/renew": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Renovar suscripción Premium
         * @description Renueva la suscripción premium del usuario.
         *
         *     - **duracion_meses**: Duración en meses (1-24)
         *     - **precio**: Precio del plan (> 0)
         *     - **transaction_id**: ID de transacción del pago (único)
         *
         *     La nueva fecha de fin se calcula desde:
         *     - La fecha de fin actual (si aún no expiró)
         *     - La fecha actual (si ya expiró)
         */
        post: operations["renew_suscripcion_api_suscripciones_renew_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sensores/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Registrar sensor
         * @description Registra un nuevo sensor IoT en una moto.
         *
         *     - **moto_id**: ID de la moto
         *     - **tipo**: Tipo de sensor (temperatura_motor, presion_aceite, etc.)
         *     - **codigo**: Código único del sensor
         *     - **frecuencia_lectura**: Frecuencia de lectura en segundos
         *     - **umbral_min/max**: Umbrales para alertas
         */
        post: operations["create_sensor_api_sensores__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sensores/lecturas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Registrar lectura
         * @description Registra una lectura de sensor IoT.
         *
         *     - **sensor_id**: ID del sensor
         *     - **valor**: Valor leído
         *     - **timestamp_lectura**: Timestamp de la lectura del dispositivo
         *     - **metadata_json**: Metadata adicional (opcional)
         */
        post: operations["register_lectura_api_sensores_lecturas_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/sensores/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estadísticas de sensores (Premium)
         * @description Obtiene estadísticas avanzadas de sensores y lecturas.
         *
         *     **Requiere plan Premium** (feature: REPORTES_AVANZADOS)
         *
         *     - **moto_id**: Filtrar por moto (opcional)
         */
        get: operations["get_stats_api_sensores_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/fallas/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear nueva falla
         * @description Registra una nueva falla detectada en una moto
         */
        post: operations["create_falla_api_fallas__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/fallas/ml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear falla detectada por ML/IA
         * @description Registra una falla detectada automáticamente por modelos de Machine Learning
         */
        post: operations["create_falla_ml_api_fallas_ml_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/fallas/{falla_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener falla por ID
         * @description Obtiene información detallada de una falla específica
         */
        get: operations["get_falla_api_fallas__falla_id__get"];
        put?: never;
        post?: never;
        /**
         * Eliminar falla
         * @description Elimina (soft delete) una falla
         */
        delete: operations["delete_falla_api_fallas__falla_id__delete"];
        options?: never;
        head?: never;
        /**
         * Actualizar falla
         * @description Actualiza información de una falla existente
         */
        patch: operations["update_falla_api_fallas__falla_id__patch"];
        trace?: never;
    };
    "/api/fallas/moto/{moto_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar fallas de una moto
         * @description Obtiene todas las fallas de una moto específica
         */
        get: operations["list_fallas_by_moto_api_fallas_moto__moto_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/fallas/{falla_id}/diagnosticar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Diagnosticar falla
         * @description Marca una falla como diagnosticada con solución propuesta
         */
        post: operations["diagnosticar_falla_api_fallas__falla_id__diagnosticar_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/fallas/{falla_id}/resolver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resolver falla
         * @description Marca una falla como resuelta
         */
        post: operations["resolver_falla_api_fallas__falla_id__resolver_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/fallas/moto/{moto_id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estadísticas de fallas (Premium)
         * @description Obtiene estadísticas completas de fallas de una moto
         */
        get: operations["get_falla_stats_api_fallas_moto__moto_id__stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mantenimiento/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear mantenimiento
         * @description Crea un nuevo mantenimiento programado para una motocicleta
         */
        post: operations["create_mantenimiento_api_mantenimiento__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mantenimiento/ml": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear mantenimiento por IA
         * @description Crea un mantenimiento recomendado por el sistema de IA
         */
        post: operations["create_mantenimiento_ml_api_mantenimiento_ml_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mantenimiento/{mantenimiento_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener mantenimiento
         * @description Obtiene los detalles de un mantenimiento específico
         */
        get: operations["get_mantenimiento_api_mantenimiento__mantenimiento_id__get"];
        put?: never;
        post?: never;
        /**
         * Eliminar mantenimiento
         * @description Elimina un mantenimiento (solo si está pendiente o cancelado)
         */
        delete: operations["delete_mantenimiento_api_mantenimiento__mantenimiento_id__delete"];
        options?: never;
        head?: never;
        /**
         * Actualizar mantenimiento
         * @description Actualiza la información de un mantenimiento
         */
        patch: operations["update_mantenimiento_api_mantenimiento__mantenimiento_id__patch"];
        trace?: never;
    };
    "/api/mantenimiento/moto/{moto_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar mantenimientos de moto
         * @description Lista todos los mantenimientos de una motocicleta específica
         */
        get: operations["list_mantenimientos_by_moto_api_mantenimiento_moto__moto_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mantenimiento/{mantenimiento_id}/iniciar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Iniciar mantenimiento
         * @description Marca un mantenimiento como iniciado y registra el mecánico y taller
         */
        post: operations["iniciar_mantenimiento_api_mantenimiento__mantenimiento_id__iniciar_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mantenimiento/{mantenimiento_id}/completar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Completar mantenimiento
         * @description Marca un mantenimiento como completado con costos y detalles finales
         */
        post: operations["completar_mantenimiento_api_mantenimiento__mantenimiento_id__completar_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/mantenimiento/moto/{moto_id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estadísticas de mantenimiento (Premium)
         * @description Obtiene estadísticas detalladas de mantenimientos de una moto
         */
        get: operations["get_mantenimiento_stats_api_mantenimiento_moto__moto_id__stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ml/predict/fault": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Predecir falla
         * @description Realiza predicción de falla usando modelo de ML
         */
        post: operations["predecir_falla_api_ml_predict_fault_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ml/predict/anomaly": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Detectar anomalía
         * @description Detecta anomalías en datos de sensores
         */
        post: operations["detectar_anomalia_api_ml_predict_anomaly_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ml/predictions/{prediccion_id}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Validar predicción
         * @description Marca una predicción como correcta o incorrecta
         */
        put: operations["validar_prediccion_api_ml_predictions__prediccion_id__validate_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ml/predictions/moto/{moto_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener predicciones por moto
         * @description Lista todas las predicciones de una motocicleta
         */
        get: operations["obtener_predicciones_moto_api_ml_predictions_moto__moto_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ml/predictions/usuario/{usuario_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener predicciones por usuario
         * @description Lista todas las predicciones de un usuario
         */
        get: operations["obtener_predicciones_usuario_api_ml_predictions_usuario__usuario_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ml/predictions/criticas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener predicciones críticas
         * @description Lista predicciones críticas (confianza >= 0.85)
         */
        get: operations["obtener_predicciones_criticas_api_ml_predictions_criticas_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ml/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener estadísticas
         * @description Estadísticas generales de predicciones
         */
        get: operations["obtener_estadisticas_api_ml_statistics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ml/models/{nombre_modelo}/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Información de modelo
         * @description Obtiene información del modelo en producción
         */
        get: operations["obtener_info_modelo_api_ml_models__nombre_modelo__info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ml/models/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Estado de modelos
         * @description Estado general de los modelos ML
         */
        get: operations["estado_modelos_api_ml_models_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Conversacion
         * @description Crea una nueva conversación.
         *
         *     - **titulo**: Título de la conversación
         *     - **moto_id**: ID de la moto asociada (opcional)
         */
        post: operations["create_conversacion_api_chatbot__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Message
         * @description Envía un mensaje al chatbot.
         *
         *     - **message**: Mensaje del usuario
         *     - **conversation_id**: ID de conversación existente (opcional)
         *     - **moto_id**: ID de la moto para contexto (opcional)
         *     - **tipo_prompt**: Tipo de prompt (diagnostic/maintenance/explanation/general)
         *     - **context**: Contexto adicional (sensores, fallas, etc.)
         *     - **stream**: Si True, retorna streaming (usar SSE)
         */
        post: operations["send_message_api_chatbot_chat_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/chat-stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Message Stream
         * @description Envía mensaje con streaming de respuesta (Server-Sent Events).
         *
         *     Retorna chunks de texto en tiempo real.
         */
        post: operations["send_message_stream_api_chatbot_chat_stream_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/{conversation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Conversacion
         * @description Obtiene una conversación con sus mensajes.
         *
         *     - **conversation_id**: ID de la conversación
         *     - **limit**: Cantidad máxima de mensajes a retornar (1-200)
         */
        get: operations["get_conversacion_api_chatbot__conversation_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete Conversacion
         * @description Elimina una conversación y sus mensajes.
         *
         *     - **conversation_id**: ID de la conversación
         */
        delete: operations["delete_conversacion_api_chatbot__conversation_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/usuario/{usuario_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Conversaciones
         * @description Lista las conversaciones de un usuario.
         *
         *     - **usuario_id**: ID del usuario
         *     - **solo_activas**: Filtrar solo activas
         *     - **skip**: Offset para paginación
         *     - **limit**: Límite de resultados (1-100)
         */
        get: operations["list_conversaciones_api_chatbot_usuario__usuario_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/messages/{mensaje_id}/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Feedback
         * @description Agrega feedback a un mensaje del asistente.
         *
         *     - **mensaje_id**: ID del mensaje
         *     - **util**: Si la respuesta fue útil
         *     - **feedback**: Comentario adicional (opcional)
         */
        post: operations["add_feedback_api_chatbot_messages__mensaje_id__feedback_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/{conversation_id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Clear History
         * @description Limpia el historial de mensajes de una conversación.
         *
         *     - **conversation_id**: ID de la conversación
         */
        delete: operations["clear_history_api_chatbot__conversation_id__history_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chatbot/stats/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Stats
         * @description Obtiene estadísticas del chatbot.
         *
         *     - **usuario_id**: ID del usuario (None para estadísticas globales, solo admin)
         *
         *     **Requiere nivel Premium para acceder.**
         */
        get: operations["get_stats_api_chatbot_stats_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notificaciones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener Notificaciones
         * @description Obtiene notificaciones del usuario actual.
         */
        get: operations["obtener_notificaciones_api_notificaciones_get"];
        put?: never;
        /**
         * Crear Notificacion
         * @description Crea una nueva notificación.
         */
        post: operations["crear_notificacion_api_notificaciones_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notificaciones/masiva": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear Notificacion Masiva
         * @description Crea notificaciones para múltiples usuarios.
         */
        post: operations["crear_notificacion_masiva_api_notificaciones_masiva_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notificaciones/{notificacion_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener Notificacion
         * @description Obtiene una notificación específica.
         */
        get: operations["obtener_notificacion_api_notificaciones__notificacion_id__get"];
        put?: never;
        post?: never;
        /**
         * Eliminar Notificacion
         * @description Elimina una notificación.
         */
        delete: operations["eliminar_notificacion_api_notificaciones__notificacion_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notificaciones/leer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Marcar Como Leidas
         * @description Marca notificaciones como leídas.
         */
        patch: operations["marcar_como_leidas_api_notificaciones_leer_patch"];
        trace?: never;
    };
    "/api/notificaciones/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener Estadisticas
         * @description Obtiene estadísticas de notificaciones del usuario.
         */
        get: operations["obtener_estadisticas_api_notificaciones_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notificaciones/preferencias": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener Preferencias
         * @description Obtiene las preferencias de notificaciones del usuario.
         */
        get: operations["obtener_preferencias_api_notificaciones_preferencias_get"];
        /**
         * Actualizar Preferencias
         * @description Actualiza las preferencias de notificaciones del usuario.
         */
        put: operations["actualizar_preferencias_api_notificaciones_preferencias_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Root
         * @description Endpoint raíz.
         */
        get: operations["root__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check para monitoreo con verificaciones de servicios.
         */
        get: operations["health_check_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Status
         * @description Estado de la API y servicios.
         */
        get: operations["api_status_api_status_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ApiResponse[ChatResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_ChatResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["ChatResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[ConversacionResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_ConversacionResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["ConversacionResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[ConversacionStatsResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_ConversacionStatsResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["ConversacionStatsResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[ConversacionWithMessagesResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_ConversacionWithMessagesResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["ConversacionWithMessagesResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[Dict[str, Any]]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_Dict_str__Any__: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /**
             * Data
             * @description Datos de la respuesta
             */
            data?: Record<string, never> | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[EstadisticasPrediccionesResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_EstadisticasPrediccionesResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["EstadisticasPrediccionesResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[FallaResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_FallaResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["FallaResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[FallaStatsResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_FallaStatsResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["FallaStatsResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[LecturaSensorResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_LecturaSensorResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["LecturaSensorResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[MantenimientoResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_MantenimientoResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["MantenimientoResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[MantenimientoStatsResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_MantenimientoStatsResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["MantenimientoStatsResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[MensajeResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_MensajeResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["MensajeResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[ModeloInfoResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_ModeloInfoResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["ModeloInfoResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[MotoResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_MotoResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["MotoResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[MotoStatsResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_MotoStatsResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["MotoStatsResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[NotificacionMasivaResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_NotificacionMasivaResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["NotificacionMasivaResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[NotificacionResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_NotificacionResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["NotificacionResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[NotificacionStatsResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_NotificacionStatsResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["NotificacionStatsResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[PrediccionResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_PrediccionResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["PrediccionResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[PreferenciaNotificacionResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_PreferenciaNotificacionResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["PreferenciaNotificacionResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[SensorResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_SensorResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["SensorResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[SensorStatsResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_SensorStatsResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["SensorStatsResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[SuscripcionResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_SuscripcionResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["SuscripcionResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[SuscripcionStatsResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_SuscripcionStatsResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["SuscripcionStatsResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[Union[PrediccionResponse, NoneType]]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_Union_PrediccionResponse__NoneType__: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["PrediccionResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[UserResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_UserResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["UserResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[UsuarioResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_UsuarioResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["UsuarioResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * ApiResponse[UsuarioStatsResponse]
         * @example {
         *       "data": {
         *         "id": 1,
         *         "name": "Ejemplo"
         *       },
         *       "message": "Operación exitosa",
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z",
         *       "version": "1.0.0"
         *     }
         */
        ApiResponse_UsuarioStatsResponse_: {
            /**
             * Success
             * @description Indica si la operación fue exitosa
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo de la operación
             * @example Operación exitosa
             * @example Usuario creado correctamente
             */
            message: string;
            /** @description Datos de la respuesta */
            data?: components["schemas"]["UsuarioStatsResponse"] | null;
            /**
             * Timestamp
             * Format: date-time
             * @description Momento en que se generó la respuesta
             */
            timestamp?: string;
            /**
             * Version
             * @description Versión de la API
             * @default 1.0.0
             */
            version: string;
        };
        /**
         * CanalNotificacion
         * @description Canales de envío de notificaciones.
         * @enum {string}
         */
        CanalNotificacion: "in_app" | "email" | "push" | "sms";
        /**
         * CancelSuscripcionRequest
         * @description Request para cancelar suscripción.
         */
        CancelSuscripcionRequest: {
            /**
             * Razon
             * @description Razón de cancelación
             */
            razon?: string | null;
        };
        /**
         * ChangePasswordRequest
         * @description Schema para cambiar contraseña (usuario autenticado).
         * @example {
         *       "current_password": "MiPassword123",
         *       "new_password": "NuevoPassword456"
         *     }
         */
        ChangePasswordRequest: {
            /**
             * Current Password
             * @description Contraseña actual
             */
            current_password: string;
            /**
             * New Password
             * @description Nueva contraseña
             */
            new_password: string;
        };
        /**
         * ChatRequest
         * @description Esquema para solicitud de chat (streaming o no).
         */
        ChatRequest: {
            /**
             * Message
             * @description Mensaje del usuario
             */
            message: string;
            /**
             * Conversation Id
             * @description ID de conversación existente
             */
            conversation_id?: string | null;
            /**
             * Moto Id
             * @description ID de moto para contexto
             */
            moto_id?: number | null;
            /**
             * Tipo Prompt
             * @description Tipo de prompt
             * @default general
             */
            tipo_prompt: string | null;
            /**
             * Stream
             * @description Si se requiere streaming
             * @default true
             */
            stream: boolean;
        };
        /**
         * ChatResponse
         * @description Esquema de respuesta de chat.
         */
        ChatResponse: {
            /**
             * Message
             * @description Respuesta del asistente
             */
            message: string;
            /**
             * Conversation Id
             * @description ID de la conversación
             */
            conversation_id: string;
            /**
             * Mensaje Id
             * @description ID del mensaje guardado
             */
            mensaje_id: number;
            /**
             * Tokens Usados
             * @description Tokens consumidos
             */
            tokens_usados?: number | null;
            /**
             * Tiempo Respuesta Ms
             * @description Tiempo de respuesta en ms
             */
            tiempo_respuesta_ms?: number | null;
            /**
             * Modelo Usado
             * @description Modelo usado
             */
            modelo_usado?: string | null;
            /**
             * Tipo Prompt
             * @description Tipo de prompt usado
             */
            tipo_prompt?: string | null;
        };
        /**
         * ConversacionCreate
         * @description Esquema para crear una conversación.
         */
        ConversacionCreate: {
            /**
             * Titulo
             * @description Título de la conversación
             */
            titulo: string;
            /**
             * Moto Id
             * @description ID de la moto (opcional)
             */
            moto_id?: number | null;
        };
        /**
         * ConversacionResponse
         * @description Esquema de respuesta de conversación.
         */
        ConversacionResponse: {
            /** Id */
            id: number;
            /** Conversation Id */
            conversation_id: string;
            /** Usuario Id */
            usuario_id: number;
            /** Moto Id */
            moto_id: number | null;
            /** Titulo */
            titulo: string;
            /** Nivel Acceso */
            nivel_acceso: string;
            /** Activa */
            activa: boolean;
            /** Total Mensajes */
            total_mensajes: number;
            /**
             * Ultima Actividad
             * Format: date-time
             */
            ultima_actividad: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * ConversacionStatsResponse
         * @description Esquema de estadísticas de conversaciones.
         */
        ConversacionStatsResponse: {
            /** Total Conversaciones */
            total_conversaciones: number;
            /** Conversaciones Activas */
            conversaciones_activas: number;
            /** Total Mensajes */
            total_mensajes: number;
            /** Promedio Mensajes Por Conversacion */
            promedio_mensajes_por_conversacion: number;
            /** Tiempo Respuesta Promedio Ms */
            tiempo_respuesta_promedio_ms: number;
            /** Tokens Totales Usados */
            tokens_totales_usados: number;
            /** Modelo Mas Usado */
            modelo_mas_usado: string;
            /** Tipo Prompt Mas Usado */
            tipo_prompt_mas_usado: string;
            /** Tasa Utilidad */
            tasa_utilidad: number;
        };
        /**
         * ConversacionWithMessagesResponse
         * @description Esquema de conversación con sus mensajes.
         */
        ConversacionWithMessagesResponse: {
            conversacion: components["schemas"]["ConversacionResponse"];
            /** Mensajes */
            mensajes: components["schemas"]["MensajeResponse"][];
        };
        /**
         * CreateLecturaRequest
         * @description Request para registrar una lectura de sensor.
         */
        CreateLecturaRequest: {
            /**
             * Sensor Id
             * @description ID del sensor
             */
            sensor_id: number;
            /**
             * Valor
             * @description Valor de la lectura
             */
            valor: number;
            /**
             * Timestamp Lectura
             * Format: date-time
             * @description Timestamp de la lectura
             */
            timestamp_lectura: string;
            /**
             * Metadata Json
             * @description Metadata adicional (JSON)
             */
            metadata_json?: string | null;
        };
        /**
         * CreateSensorRequest
         * @description Request para crear un sensor.
         */
        CreateSensorRequest: {
            /**
             * Moto Id
             * @description ID de la moto
             */
            moto_id: number;
            /**
             * Tipo
             * @description Tipo de sensor
             */
            tipo: string;
            /**
             * Codigo
             * @description Código único del sensor
             */
            codigo: string;
            /**
             * Nombre
             * @description Nombre del sensor
             */
            nombre?: string | null;
            /**
             * Ubicacion
             * @description Ubicación física
             */
            ubicacion?: string | null;
            /**
             * Frecuencia Lectura
             * @description Frecuencia en segundos
             * @default 5
             */
            frecuencia_lectura: number;
            /**
             * Umbral Min
             * @description Umbral mínimo
             */
            umbral_min?: number | null;
            /**
             * Umbral Max
             * @description Umbral máximo
             */
            umbral_max?: number | null;
            /**
             * Fabricante
             * @description Fabricante
             */
            fabricante?: string | null;
            /**
             * Modelo
             * @description Modelo
             */
            modelo?: string | null;
            /**
             * Version Firmware
             * @description Versión del firmware
             */
            version_firmware?: string | null;
            /**
             * Notas
             * @description Notas
             */
            notas?: string | null;
        };
        /**
         * CreateSuscripcionRequest
         * @description Request para crear una nueva suscripción.
         */
        CreateSuscripcionRequest: {
            /**
             * Usuario Id
             * @description ID del usuario (INTEGER)
             */
            usuario_id: number;
            /**
             * Plan
             * @description Tipo de plan (freemium/premium)
             */
            plan: string;
            /**
             * Duracion Meses
             * @description Duración en meses (solo para premium)
             */
            duracion_meses?: number | null;
            /**
             * Precio
             * @description Precio del plan
             */
            precio?: number | null;
            /**
             * Metodo Pago
             * @description Método de pago
             */
            metodo_pago?: string | null;
            /**
             * Transaction Id
             * @description ID de transacción
             */
            transaction_id?: string | null;
            /**
             * Auto Renovacion
             * @description Auto-renovación
             * @default false
             */
            auto_renovacion: boolean;
            /**
             * Notas
             * @description Notas adicionales
             */
            notas?: string | null;
        };
        /**
         * CreateUsuarioRequest
         * @description Schema para crear usuario (admin only).
         * @example {
         *       "activo": true,
         *       "email": "nuevo@ejemplo.com",
         *       "nombre": "María García",
         *       "password": "Password123",
         *       "rol": "user",
         *       "telefono": "+573001234567"
         *     }
         */
        CreateUsuarioRequest: {
            /**
             * Email
             * Format: email
             * @description Email del usuario
             */
            email: string;
            /**
             * Password
             * @description Contraseña inicial
             */
            password: string;
            /**
             * Nombre
             * @description Nombre completo
             */
            nombre: string;
            /**
             * Telefono
             * @description Teléfono de contacto
             */
            telefono?: string | null;
            /**
             * Rol
             * @description Rol del usuario (user/admin)
             * @default user
             */
            rol: string;
            /**
             * Activo
             * @description Si la cuenta está activa
             * @default true
             */
            activo: boolean;
        };
        /**
         * DatosSensor
         * @description Datos de sensores para predicción.
         */
        DatosSensor: {
            /**
             * Temperatura
             * @description Temperatura en °C
             */
            temperatura?: number | null;
            /**
             * Vibracion
             * @description Nivel de vibración
             */
            vibracion?: number | null;
            /**
             * Rpm
             * @description Revoluciones por minuto
             */
            rpm?: number | null;
            /**
             * Velocidad
             * @description Velocidad en km/h
             */
            velocidad?: number | null;
            /**
             * Presion Aceite
             * @description Presión de aceite en bar
             */
            presion_aceite?: number | null;
            /**
             * Nivel Combustible
             * @description Nivel de combustible %
             */
            nivel_combustible?: number | null;
        };
        /**
         * EstadisticasPrediccionesResponse
         * @description Estadísticas de predicciones.
         */
        EstadisticasPrediccionesResponse: {
            /** Total Predicciones */
            total_predicciones: number;
            /** Predicciones Confirmadas */
            predicciones_confirmadas: number;
            /** Predicciones Falsas */
            predicciones_falsas: number;
            /** Predicciones Pendientes */
            predicciones_pendientes: number;
            /** Tasa Acierto */
            tasa_acierto: number;
            /** Confianza Promedio */
            confianza_promedio: number;
            /** Por Tipo */
            por_tipo: {
                [key: string]: number;
            };
            /** Por Nivel Confianza */
            por_nivel_confianza: {
                [key: string]: number;
            };
        };
        /**
         * EstadoMantenimiento
         * @description Estados de mantenimiento.
         * @enum {string}
         */
        EstadoMantenimiento: "pendiente" | "programado" | "en_proceso" | "completado" | "cancelado";
        /**
         * EstadoNotificacion
         * @description Estados de una notificación.
         * @enum {string}
         */
        EstadoNotificacion: "pendiente" | "enviada" | "leida" | "fallida";
        /**
         * EstadoPrediccionEnum
         * @description Estados de predicción.
         * @enum {string}
         */
        EstadoPrediccionEnum: "pendiente" | "confirmada" | "falsa" | "expirada";
        /**
         * FallaCreate
         * @description Schema para crear una nueva falla.
         */
        FallaCreate: {
            /**
             * Moto Id
             * @description ID de la moto
             */
            moto_id: number;
            /**
             * Sensor Id
             * @description ID del sensor (opcional)
             */
            sensor_id?: number | null;
            /**
             * Tipo
             * @description Tipo de falla
             */
            tipo: string;
            /**
             * Titulo
             * @description Título descriptivo
             */
            titulo: string;
            /**
             * Descripcion
             * @description Descripción detallada
             */
            descripcion: string;
            /**
             * Severidad
             * @description Severidad de la falla
             * @default media
             */
            severidad: string;
            /**
             * Origen Deteccion
             * @description Origen: sensor, ml, manual, sistema
             * @default manual
             */
            origen_deteccion: string;
            /**
             * Valor Actual
             * @description Valor actual del sensor
             */
            valor_actual?: number | null;
            /**
             * Valor Esperado
             * @description Valor esperado
             */
            valor_esperado?: number | null;
            /**
             * Requiere Atencion Inmediata
             * @description ¿Requiere atención urgente?
             * @default false
             */
            requiere_atencion_inmediata: boolean;
            /**
             * Puede Conducir
             * @description ¿Es seguro conducir?
             * @default true
             */
            puede_conducir: boolean;
            /**
             * Solucion Sugerida
             * @description Solución sugerida
             */
            solucion_sugerida?: string | null;
        };
        /**
         * FallaDiagnosticar
         * @description Schema para diagnosticar una falla.
         */
        FallaDiagnosticar: {
            /**
             * Solucion Sugerida
             * @description Solución propuesta
             */
            solucion_sugerida: string;
            /**
             * Costo Estimado
             * @description Costo estimado
             */
            costo_estimado?: number | null;
            /**
             * Notas Tecnico
             * @description Notas del diagnóstico
             */
            notas_tecnico?: string | null;
        };
        /**
         * FallaMLCreate
         * @description Schema para crear falla detectada por ML.
         */
        FallaMLCreate: {
            /** Moto Id */
            moto_id: number;
            /** Sensor Id */
            sensor_id?: number | null;
            /** Tipo */
            tipo: string;
            /** Titulo */
            titulo: string;
            /** Descripcion */
            descripcion: string;
            /**
             * Severidad
             * @default media
             */
            severidad: string;
            /**
             * Confianza Ml
             * @description Confianza del modelo (0-1)
             */
            confianza_ml: number;
            /**
             * Modelo Ml Usado
             * @description Nombre del modelo ML
             */
            modelo_ml_usado: string;
            /**
             * Prediccion Ml
             * @description Detalles de predicción (JSON)
             */
            prediccion_ml?: string | null;
            /** Valor Actual */
            valor_actual?: number | null;
            /** Valor Esperado */
            valor_esperado?: number | null;
            /**
             * Requiere Atencion Inmediata
             * @default false
             */
            requiere_atencion_inmediata: boolean;
            /**
             * Puede Conducir
             * @default true
             */
            puede_conducir: boolean;
            /** Solucion Sugerida */
            solucion_sugerida?: string | null;
        };
        /**
         * FallaResolver
         * @description Schema para marcar falla como resuelta.
         */
        FallaResolver: {
            /**
             * Solucion Aplicada
             * @description Qué se hizo para resolver
             */
            solucion_aplicada: string;
            /**
             * Costo Real
             * @description Costo real
             */
            costo_real: number;
            /**
             * Notas Tecnico
             * @description Notas finales
             */
            notas_tecnico?: string | null;
        };
        /**
         * FallaResponse
         * @description Schema de respuesta con información completa de falla.
         */
        FallaResponse: {
            /** Id */
            id: number;
            /** Moto Id */
            moto_id: number;
            /** Sensor Id */
            sensor_id: number | null;
            /** Usuario Id */
            usuario_id: number | null;
            /** Codigo */
            codigo: string;
            /** Tipo */
            tipo: string;
            /** Titulo */
            titulo: string;
            /** Descripcion */
            descripcion: string;
            /** Severidad */
            severidad: string;
            /** Estado */
            estado: string;
            /** Origen Deteccion */
            origen_deteccion: string;
            /** Valor Actual */
            valor_actual: number | null;
            /** Valor Esperado */
            valor_esperado: number | null;
            /** Confianza Ml */
            confianza_ml: number | null;
            /** Modelo Ml Usado */
            modelo_ml_usado: string | null;
            /** Requiere Atencion Inmediata */
            requiere_atencion_inmediata: boolean;
            /** Puede Conducir */
            puede_conducir: boolean;
            /** Solucion Sugerida */
            solucion_sugerida: string | null;
            /** Solucion Aplicada */
            solucion_aplicada: string | null;
            /**
             * Fecha Deteccion
             * Format: date-time
             */
            fecha_deteccion: string;
            /** Fecha Diagnostico */
            fecha_diagnostico: string | null;
            /** Fecha Resolucion */
            fecha_resolucion: string | null;
            /** Costo Estimado */
            costo_estimado: number | null;
            /** Costo Real */
            costo_real: number | null;
            /** Notas Tecnico */
            notas_tecnico: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * FallaStatsResponse
         * @description Estadísticas de fallas (Premium).
         */
        FallaStatsResponse: {
            /** Total Fallas */
            total_fallas: number;
            /** Fallas Activas */
            fallas_activas: number;
            /** Fallas Resueltas */
            fallas_resueltas: number;
            /** Fallas Criticas */
            fallas_criticas: number;
            /** Por Tipo */
            por_tipo: {
                [key: string]: number;
            };
            /** Por Severidad */
            por_severidad: {
                [key: string]: number;
            };
            /** Por Estado */
            por_estado: {
                [key: string]: number;
            };
            /** Tiempo Promedio Resolucion Dias */
            tiempo_promedio_resolucion_dias: number | null;
            /** Costo Total Reparaciones */
            costo_total_reparaciones: number;
            /** Tasa Resolucion */
            tasa_resolucion: number;
        };
        /**
         * FallaUpdate
         * @description Schema para actualizar una falla existente.
         */
        FallaUpdate: {
            /**
             * Estado
             * @description Nuevo estado
             */
            estado?: string | null;
            /**
             * Severidad
             * @description Nueva severidad
             */
            severidad?: string | null;
            /**
             * Solucion Aplicada
             * @description Solución que se aplicó
             */
            solucion_aplicada?: string | null;
            /**
             * Costo Real
             * @description Costo real de reparación
             */
            costo_real?: number | null;
            /**
             * Notas Tecnico
             * @description Notas del técnico
             */
            notas_tecnico?: string | null;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * LecturaSensorResponse
         * @description Response con datos de lectura.
         */
        LecturaSensorResponse: {
            /** Id */
            id: number;
            /** Sensor Id */
            sensor_id: number;
            /** Valor */
            valor: number;
            /** Unidad */
            unidad: string;
            /**
             * Timestamp Lectura
             * Format: date-time
             */
            timestamp_lectura: string;
            /** Fuera Rango */
            fuera_rango: boolean;
            /** Alerta Generada */
            alerta_generada: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * LoginRequest
         * @description Schema para login de usuario.
         * @example {
         *       "email": "usuario@ejemplo.com",
         *       "password": "MiPassword123"
         *     }
         */
        LoginRequest: {
            /**
             * Email
             * Format: email
             * @description Email del usuario
             */
            email: string;
            /**
             * Password
             * @description Contraseña
             */
            password: string;
        };
        /**
         * LoginResponse
         * @description Schema para respuesta de login exitoso.
         * @example {
         *       "tokens": {
         *         "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *         "expires_in": 3600,
         *         "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *         "token_type": "bearer"
         *       },
         *       "user": {
         *         "activo": true,
         *         "email": "usuario@ejemplo.com",
         *         "email_verificado": true,
         *         "es_admin": false,
         *         "id": "123e4567-e89b-12d3-a456-426614174000",
         *         "nombre": "Juan Pérez"
         *       }
         *     }
         */
        LoginResponse: {
            /** @description Datos del usuario */
            user: components["schemas"]["UserResponse"];
            /** @description Tokens de autenticación */
            tokens: components["schemas"]["TokenResponse"];
        };
        /**
         * MantenimientoCompletar
         * @description Esquema para completar un mantenimiento.
         */
        MantenimientoCompletar: {
            /**
             * Notas Tecnico
             * @description Notas del técnico
             */
            notas_tecnico: string;
            /**
             * Repuestos Usados
             * @description Repuestos utilizados
             */
            repuestos_usados?: string | null;
            /**
             * Kilometraje Siguiente
             * @description Próximo mantenimiento (km)
             */
            kilometraje_siguiente?: number | null;
            /**
             * Costo Real
             * @description Costo real total
             */
            costo_real: number;
            /**
             * Costo Repuestos
             * @description Costo de repuestos
             */
            costo_repuestos?: number | null;
            /**
             * Costo Mano Obra
             * @description Costo de mano de obra
             */
            costo_mano_obra?: number | null;
        };
        /**
         * MantenimientoCreate
         * @description Esquema para crear un mantenimiento.
         */
        MantenimientoCreate: {
            /**
             * Moto Id
             * @description ID de la moto
             */
            moto_id: number;
            /** @description Tipo de mantenimiento */
            tipo: components["schemas"]["TipoMantenimiento"];
            /**
             * Descripcion
             * @description Descripción del mantenimiento
             */
            descripcion: string;
            /**
             * Es Preventivo
             * @description Es mantenimiento preventivo o correctivo
             * @default true
             */
            es_preventivo: boolean;
            /**
             * Falla Relacionada Id
             * @description ID de falla relacionada (si es correctivo)
             */
            falla_relacionada_id?: number | null;
            /**
             * Kilometraje Actual
             * @description Kilometraje actual
             */
            kilometraje_actual: number;
            /**
             * Kilometraje Siguiente
             * @description Kilometraje para próximo servicio
             */
            kilometraje_siguiente?: number | null;
            /**
             * Fecha Programada
             * @description Fecha programada del servicio
             */
            fecha_programada?: string | null;
            /**
             * Fecha Vencimiento
             * @description Fecha límite del servicio
             */
            fecha_vencimiento?: string | null;
            /**
             * Mecanico Asignado
             * @description Nombre del mecánico
             */
            mecanico_asignado?: string | null;
            /**
             * Taller Realizado
             * @description Taller donde se realizará
             */
            taller_realizado?: string | null;
            /**
             * Costo Estimado
             * @description Costo estimado
             */
            costo_estimado?: number | null;
            /**
             * Prioridad
             * @description Prioridad (1-5)
             * @default 3
             */
            prioridad: number;
            /**
             * Es Urgente
             * @description Marca como urgente
             * @default false
             */
            es_urgente: boolean;
            /**
             * Dias Anticipacion Alerta
             * @description Días de anticipación para alerta
             * @default 7
             */
            dias_anticipacion_alerta: number;
        };
        /**
         * MantenimientoIniciar
         * @description Esquema para iniciar un mantenimiento.
         */
        MantenimientoIniciar: {
            /** Mecanico Asignado */
            mecanico_asignado?: string | null;
            /** Taller Realizado */
            taller_realizado?: string | null;
            /** Notas Tecnico */
            notas_tecnico?: string | null;
        };
        /**
         * MantenimientoMLCreate
         * @description Esquema para crear mantenimiento recomendado por IA.
         */
        MantenimientoMLCreate: {
            /** Moto Id */
            moto_id: number;
            tipo: components["schemas"]["TipoMantenimiento"];
            /** Descripcion */
            descripcion: string;
            /** Kilometraje Actual */
            kilometraje_actual: number;
            /**
             * Confianza Prediccion
             * @description Confianza de la predicción
             */
            confianza_prediccion: number;
            /**
             * Modelo Ia Usado
             * @description Modelo usado para la predicción
             */
            modelo_ia_usado: string;
            /** Fecha Vencimiento */
            fecha_vencimiento?: string | null;
            /**
             * Prioridad
             * @default 3
             */
            prioridad: number;
            /**
             * Es Urgente
             * @default false
             */
            es_urgente: boolean;
        };
        /**
         * MantenimientoResponse
         * @description Esquema de respuesta de mantenimiento.
         */
        MantenimientoResponse: {
            /** Id */
            id: number;
            /** Codigo */
            codigo: string;
            /** Moto Id */
            moto_id: number;
            tipo: components["schemas"]["TipoMantenimiento"];
            estado: components["schemas"]["EstadoMantenimiento"];
            /** Es Preventivo */
            es_preventivo: boolean;
            /** Falla Relacionada Id */
            falla_relacionada_id: number | null;
            /** Kilometraje Actual */
            kilometraje_actual: number;
            /** Kilometraje Siguiente */
            kilometraje_siguiente: number | null;
            /** Fecha Programada */
            fecha_programada: string | null;
            /** Fecha Inicio */
            fecha_inicio: string | null;
            /** Fecha Completado */
            fecha_completado: string | null;
            /** Fecha Vencimiento */
            fecha_vencimiento: string | null;
            /** Descripcion */
            descripcion: string;
            /** Notas Tecnico */
            notas_tecnico: string | null;
            /** Repuestos Usados */
            repuestos_usados: string | null;
            /** Mecanico Asignado */
            mecanico_asignado: string | null;
            /** Taller Realizado */
            taller_realizado: string | null;
            /** Costo Estimado */
            costo_estimado: number | null;
            /** Costo Real */
            costo_real: number | null;
            /** Costo Repuestos */
            costo_repuestos: number | null;
            /** Costo Mano Obra */
            costo_mano_obra: number | null;
            /** Prioridad */
            prioridad: number;
            /** Es Urgente */
            es_urgente: boolean;
            /** Dias Anticipacion Alerta */
            dias_anticipacion_alerta: number;
            /** Alerta Enviada */
            alerta_enviada: boolean;
            /** Recomendado Por Ia */
            recomendado_por_ia: boolean;
            /** Confianza Prediccion */
            confianza_prediccion: number | null;
            /** Modelo Ia Usado */
            modelo_ia_usado: string | null;
            /** Esta Completado */
            esta_completado: boolean;
            /** Esta Vencido */
            esta_vencido: boolean;
            /** Dias Hasta Vencimiento */
            dias_hasta_vencimiento: number | null;
            /** Requiere Atencion */
            requiere_atencion: boolean;
            /** Costo Total */
            costo_total: number | null;
            /** Duracion Servicio */
            duracion_servicio: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * MantenimientoStatsResponse
         * @description Esquema de respuesta para estadísticas de mantenimiento.
         */
        MantenimientoStatsResponse: {
            /** Total Mantenimientos */
            total_mantenimientos: number;
            /** Pendientes */
            pendientes: number;
            /** Programados */
            programados: number;
            /** En Proceso */
            en_proceso: number;
            /** Completados */
            completados: number;
            /** Cancelados */
            cancelados: number;
            /** Vencidos */
            vencidos: number;
            /** Urgentes */
            urgentes: number;
            /** Por Tipo */
            por_tipo: {
                [key: string]: number;
            };
            /** Costo Total Estimado */
            costo_total_estimado: number;
            /** Costo Total Real */
            costo_total_real: number;
            /** Costo Promedio */
            costo_promedio: number;
            /** Duracion Promedio Horas */
            duracion_promedio_horas: number | null;
            /** Recomendados Por Ia */
            recomendados_por_ia: number;
            /** Confianza Promedio Ia */
            confianza_promedio_ia: number | null;
        };
        /**
         * MantenimientoUpdate
         * @description Esquema para actualizar un mantenimiento.
         */
        MantenimientoUpdate: {
            tipo?: components["schemas"]["TipoMantenimiento"] | null;
            estado?: components["schemas"]["EstadoMantenimiento"] | null;
            /** Descripcion */
            descripcion?: string | null;
            /** Notas Tecnico */
            notas_tecnico?: string | null;
            /** Mecanico Asignado */
            mecanico_asignado?: string | null;
            /** Taller Realizado */
            taller_realizado?: string | null;
            /** Fecha Programada */
            fecha_programada?: string | null;
            /** Fecha Vencimiento */
            fecha_vencimiento?: string | null;
            /** Prioridad */
            prioridad?: number | null;
            /** Es Urgente */
            es_urgente?: boolean | null;
            /** Dias Anticipacion Alerta */
            dias_anticipacion_alerta?: number | null;
        };
        /**
         * MarcarLeidaRequest
         * @description Schema para marcar notificaciones como leídas.
         */
        MarcarLeidaRequest: {
            /**
             * Notificacion Ids
             * @description IDs de notificaciones a marcar (None = todas)
             */
            notificacion_ids?: number[] | null;
        };
        /**
         * MensajeFeedback
         * @description Esquema para dar feedback a un mensaje.
         */
        MensajeFeedback: {
            /**
             * Util
             * @description Si la respuesta fue útil
             */
            util: boolean;
            /**
             * Feedback
             * @description Comentarios adicionales
             */
            feedback?: string | null;
        };
        /**
         * MensajeResponse
         * @description Esquema de respuesta de mensaje.
         */
        MensajeResponse: {
            /** Id */
            id: number;
            /** Conversacion Id */
            conversacion_id: number;
            /** Role */
            role: string;
            /** Contenido */
            contenido: string;
            /** Tokens Usados */
            tokens_usados: number | null;
            /** Tiempo Respuesta Ms */
            tiempo_respuesta_ms: number | null;
            /** Modelo Usado */
            modelo_usado: string | null;
            /** Tipo Prompt */
            tipo_prompt: string | null;
            /** Confianza */
            confianza: number | null;
            /** Util */
            util: boolean | null;
            /** Feedback */
            feedback: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * ModeloInfoResponse
         * @description Información de un modelo ML.
         */
        ModeloInfoResponse: {
            /** Nombre */
            nombre: string;
            /** Version */
            version: string;
            /** Tipo */
            tipo: string;
            /** Accuracy */
            accuracy: number | null;
            /** F1 Score */
            f1_score: number | null;
            /** En Produccion */
            en_produccion: boolean;
            /**
             * Fecha Entrenamiento
             * Format: date-time
             */
            fecha_entrenamiento: string;
            /** Ruta Modelo */
            ruta_modelo: string;
        };
        /**
         * MotoResponse
         * @description Response con información completa de una moto.
         */
        MotoResponse: {
            /** Id */
            id: number;
            /** Usuario Id */
            usuario_id: number;
            /** Marca */
            marca: string;
            /** Modelo */
            modelo: string;
            /** Año */
            "a\u00F1o": number;
            /** Vin */
            vin: string;
            /** Placa */
            placa: string | null;
            /** Color */
            color: string | null;
            /** Kilometraje */
            kilometraje: number;
            /** Observaciones */
            observaciones: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Deleted At */
            deleted_at: string | null;
            usuario?: components["schemas"]["UsuarioBasicInfo"] | null;
            /** Nombre Completo */
            nombre_completo?: string | null;
            /** Es Ktm */
            es_ktm?: boolean | null;
        };
        /**
         * MotoStatsResponse
         * @description Response con estadísticas de motos.
         */
        MotoStatsResponse: {
            /** Total Motos */
            total_motos: number;
            /** Motos Por Año */
            "motos_por_a\u00F1o": {
                [key: string]: number;
            };
            /** Kilometraje Promedio */
            kilometraje_promedio: number;
            /** Modelos Populares */
            modelos_populares: {
                [key: string]: number;
            }[];
        };
        /**
         * NivelConfianzaEnum
         * @description Niveles de confianza.
         * @enum {string}
         */
        NivelConfianzaEnum: "muy_bajo" | "bajo" | "medio" | "alto" | "muy_alto";
        /**
         * NotificacionCreate
         * @description Schema para crear una notificación.
         */
        NotificacionCreate: {
            /**
             * Usuario Id
             * @description ID del usuario destinatario
             */
            usuario_id: number;
            /**
             * Titulo
             * @description Título de la notificación
             */
            titulo: string;
            /**
             * Mensaje
             * @description Mensaje de la notificación
             */
            mensaje: string;
            /**
             * @description Tipo de notificación
             * @default info
             */
            tipo: components["schemas"]["TipoNotificacion"];
            /**
             * @description Canal de envío
             * @default in_app
             */
            canal: components["schemas"]["CanalNotificacion"];
            /**
             * Datos Adicionales
             * @description Datos adicionales en JSON
             */
            datos_adicionales?: Record<string, never> | null;
            /**
             * Accion Url
             * @description URL de acción
             */
            accion_url?: string | null;
            /**
             * Accion Tipo
             * @description Tipo de acción
             */
            accion_tipo?: string | null;
            /**
             * Referencia Tipo
             * @description Tipo de referencia
             */
            referencia_tipo?: string | null;
            /**
             * Referencia Id
             * @description ID del objeto referenciado
             */
            referencia_id?: number | null;
            /**
             * Expira En
             * @description Fecha de expiración
             */
            expira_en?: string | null;
        };
        /**
         * NotificacionMasivaCreate
         * @description Schema para crear notificaciones masivas.
         */
        NotificacionMasivaCreate: {
            /**
             * Usuarios Ids
             * @description Lista de IDs de usuarios
             */
            usuarios_ids: number[];
            /** Titulo */
            titulo: string;
            /** Mensaje */
            mensaje: string;
            /** @default info */
            tipo: components["schemas"]["TipoNotificacion"];
            /** @default in_app */
            canal: components["schemas"]["CanalNotificacion"];
            /** Datos Adicionales */
            datos_adicionales?: Record<string, never> | null;
            /** Accion Url */
            accion_url?: string | null;
            /** Accion Tipo */
            accion_tipo?: string | null;
        };
        /**
         * NotificacionMasivaResponse
         * @description Schema de respuesta para notificación masiva.
         */
        NotificacionMasivaResponse: {
            /** Total Creadas */
            total_creadas: number;
            /** Notificaciones */
            notificaciones: components["schemas"]["NotificacionResponse"][];
        };
        /**
         * NotificacionResponse
         * @description Schema de respuesta para una notificación.
         */
        NotificacionResponse: {
            /** Id */
            id: number;
            /** Usuario Id */
            usuario_id: number;
            /** Titulo */
            titulo: string;
            /** Mensaje */
            mensaje: string;
            tipo: components["schemas"]["TipoNotificacion"];
            canal: components["schemas"]["CanalNotificacion"];
            estado: components["schemas"]["EstadoNotificacion"];
            /** Datos Adicionales */
            datos_adicionales?: Record<string, never> | null;
            /** Accion Url */
            accion_url?: string | null;
            /** Accion Tipo */
            accion_tipo?: string | null;
            /** Referencia Tipo */
            referencia_tipo?: string | null;
            /** Referencia Id */
            referencia_id?: number | null;
            /** Leida */
            leida: boolean;
            /** Leida En */
            leida_en?: string | null;
            /** Enviada */
            enviada: boolean;
            /** Enviada En */
            enviada_en?: string | null;
            /** Expira En */
            expira_en?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * NotificacionStatsResponse
         * @description Schema de respuesta para estadísticas de notificaciones.
         */
        NotificacionStatsResponse: {
            /** Total */
            total: number;
            /** No Leidas */
            no_leidas: number;
            /** Leidas */
            leidas: number;
            /** Por Tipo */
            por_tipo: {
                [key: string]: number;
            };
            /** Por Canal */
            por_canal: {
                [key: string]: number;
            };
            /** Por Estado */
            por_estado: {
                [key: string]: number;
            };
        };
        /**
         * PaginatedResponse[ConversacionResponse]
         * @example {
         *       "data": [
         *         {
         *           "id": 1,
         *           "name": "Usuario 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Usuario 2"
         *         }
         *       ],
         *       "message": "Usuarios obtenidos",
         *       "pagination": {
         *         "has_next": true,
         *         "has_prev": false,
         *         "next_page": 2,
         *         "page": 1,
         *         "per_page": 20,
         *         "total_items": 150,
         *         "total_pages": 8
         *       },
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z"
         *     }
         */
        PaginatedResponse_ConversacionResponse_: {
            /**
             * Success
             * @description Si la operación fue exitosa
             * @default true
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo
             * @example Datos obtenidos correctamente
             * @example Lista de usuarios
             */
            message: string;
            /**
             * Data
             * @description Lista de items paginados
             */
            data: components["schemas"]["ConversacionResponse"][];
            /** @description Metadata de paginación */
            pagination: components["schemas"]["PaginationMeta"];
            /**
             * Timestamp
             * Format: date-time
             * @description Momento de la respuesta
             */
            timestamp?: string;
        };
        /**
         * PaginatedResponse[FallaResponse]
         * @example {
         *       "data": [
         *         {
         *           "id": 1,
         *           "name": "Usuario 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Usuario 2"
         *         }
         *       ],
         *       "message": "Usuarios obtenidos",
         *       "pagination": {
         *         "has_next": true,
         *         "has_prev": false,
         *         "next_page": 2,
         *         "page": 1,
         *         "per_page": 20,
         *         "total_items": 150,
         *         "total_pages": 8
         *       },
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z"
         *     }
         */
        PaginatedResponse_FallaResponse_: {
            /**
             * Success
             * @description Si la operación fue exitosa
             * @default true
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo
             * @example Datos obtenidos correctamente
             * @example Lista de usuarios
             */
            message: string;
            /**
             * Data
             * @description Lista de items paginados
             */
            data: components["schemas"]["FallaResponse"][];
            /** @description Metadata de paginación */
            pagination: components["schemas"]["PaginationMeta"];
            /**
             * Timestamp
             * Format: date-time
             * @description Momento de la respuesta
             */
            timestamp?: string;
        };
        /**
         * PaginatedResponse[MantenimientoResponse]
         * @example {
         *       "data": [
         *         {
         *           "id": 1,
         *           "name": "Usuario 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Usuario 2"
         *         }
         *       ],
         *       "message": "Usuarios obtenidos",
         *       "pagination": {
         *         "has_next": true,
         *         "has_prev": false,
         *         "next_page": 2,
         *         "page": 1,
         *         "per_page": 20,
         *         "total_items": 150,
         *         "total_pages": 8
         *       },
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z"
         *     }
         */
        PaginatedResponse_MantenimientoResponse_: {
            /**
             * Success
             * @description Si la operación fue exitosa
             * @default true
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo
             * @example Datos obtenidos correctamente
             * @example Lista de usuarios
             */
            message: string;
            /**
             * Data
             * @description Lista de items paginados
             */
            data: components["schemas"]["MantenimientoResponse"][];
            /** @description Metadata de paginación */
            pagination: components["schemas"]["PaginationMeta"];
            /**
             * Timestamp
             * Format: date-time
             * @description Momento de la respuesta
             */
            timestamp?: string;
        };
        /**
         * PaginatedResponse[MotoResponse]
         * @example {
         *       "data": [
         *         {
         *           "id": 1,
         *           "name": "Usuario 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Usuario 2"
         *         }
         *       ],
         *       "message": "Usuarios obtenidos",
         *       "pagination": {
         *         "has_next": true,
         *         "has_prev": false,
         *         "next_page": 2,
         *         "page": 1,
         *         "per_page": 20,
         *         "total_items": 150,
         *         "total_pages": 8
         *       },
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z"
         *     }
         */
        PaginatedResponse_MotoResponse_: {
            /**
             * Success
             * @description Si la operación fue exitosa
             * @default true
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo
             * @example Datos obtenidos correctamente
             * @example Lista de usuarios
             */
            message: string;
            /**
             * Data
             * @description Lista de items paginados
             */
            data: components["schemas"]["MotoResponse"][];
            /** @description Metadata de paginación */
            pagination: components["schemas"]["PaginationMeta"];
            /**
             * Timestamp
             * Format: date-time
             * @description Momento de la respuesta
             */
            timestamp?: string;
        };
        /**
         * PaginatedResponse[NotificacionResponse]
         * @example {
         *       "data": [
         *         {
         *           "id": 1,
         *           "name": "Usuario 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Usuario 2"
         *         }
         *       ],
         *       "message": "Usuarios obtenidos",
         *       "pagination": {
         *         "has_next": true,
         *         "has_prev": false,
         *         "next_page": 2,
         *         "page": 1,
         *         "per_page": 20,
         *         "total_items": 150,
         *         "total_pages": 8
         *       },
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z"
         *     }
         */
        PaginatedResponse_NotificacionResponse_: {
            /**
             * Success
             * @description Si la operación fue exitosa
             * @default true
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo
             * @example Datos obtenidos correctamente
             * @example Lista de usuarios
             */
            message: string;
            /**
             * Data
             * @description Lista de items paginados
             */
            data: components["schemas"]["NotificacionResponse"][];
            /** @description Metadata de paginación */
            pagination: components["schemas"]["PaginationMeta"];
            /**
             * Timestamp
             * Format: date-time
             * @description Momento de la respuesta
             */
            timestamp?: string;
        };
        /**
         * PaginatedResponse[PrediccionResponse]
         * @example {
         *       "data": [
         *         {
         *           "id": 1,
         *           "name": "Usuario 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Usuario 2"
         *         }
         *       ],
         *       "message": "Usuarios obtenidos",
         *       "pagination": {
         *         "has_next": true,
         *         "has_prev": false,
         *         "next_page": 2,
         *         "page": 1,
         *         "per_page": 20,
         *         "total_items": 150,
         *         "total_pages": 8
         *       },
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z"
         *     }
         */
        PaginatedResponse_PrediccionResponse_: {
            /**
             * Success
             * @description Si la operación fue exitosa
             * @default true
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo
             * @example Datos obtenidos correctamente
             * @example Lista de usuarios
             */
            message: string;
            /**
             * Data
             * @description Lista de items paginados
             */
            data: components["schemas"]["PrediccionResponse"][];
            /** @description Metadata de paginación */
            pagination: components["schemas"]["PaginationMeta"];
            /**
             * Timestamp
             * Format: date-time
             * @description Momento de la respuesta
             */
            timestamp?: string;
        };
        /**
         * PaginatedResponse[SuscripcionResponse]
         * @example {
         *       "data": [
         *         {
         *           "id": 1,
         *           "name": "Usuario 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Usuario 2"
         *         }
         *       ],
         *       "message": "Usuarios obtenidos",
         *       "pagination": {
         *         "has_next": true,
         *         "has_prev": false,
         *         "next_page": 2,
         *         "page": 1,
         *         "per_page": 20,
         *         "total_items": 150,
         *         "total_pages": 8
         *       },
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z"
         *     }
         */
        PaginatedResponse_SuscripcionResponse_: {
            /**
             * Success
             * @description Si la operación fue exitosa
             * @default true
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo
             * @example Datos obtenidos correctamente
             * @example Lista de usuarios
             */
            message: string;
            /**
             * Data
             * @description Lista de items paginados
             */
            data: components["schemas"]["SuscripcionResponse"][];
            /** @description Metadata de paginación */
            pagination: components["schemas"]["PaginationMeta"];
            /**
             * Timestamp
             * Format: date-time
             * @description Momento de la respuesta
             */
            timestamp?: string;
        };
        /**
         * PaginatedResponse[UsuarioResponse]
         * @example {
         *       "data": [
         *         {
         *           "id": 1,
         *           "name": "Usuario 1"
         *         },
         *         {
         *           "id": 2,
         *           "name": "Usuario 2"
         *         }
         *       ],
         *       "message": "Usuarios obtenidos",
         *       "pagination": {
         *         "has_next": true,
         *         "has_prev": false,
         *         "next_page": 2,
         *         "page": 1,
         *         "per_page": 20,
         *         "total_items": 150,
         *         "total_pages": 8
         *       },
         *       "success": true,
         *       "timestamp": "2025-10-08T10:30:00Z"
         *     }
         */
        PaginatedResponse_UsuarioResponse_: {
            /**
             * Success
             * @description Si la operación fue exitosa
             * @default true
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje descriptivo
             * @example Datos obtenidos correctamente
             * @example Lista de usuarios
             */
            message: string;
            /**
             * Data
             * @description Lista de items paginados
             */
            data: components["schemas"]["UsuarioResponse"][];
            /** @description Metadata de paginación */
            pagination: components["schemas"]["PaginationMeta"];
            /**
             * Timestamp
             * Format: date-time
             * @description Momento de la respuesta
             */
            timestamp?: string;
        };
        /**
         * PaginationMeta
         * @description Metadata de paginación.
         *
         *     Attributes:
         *         page: Página actual (1-indexed)
         *         per_page: Items por página
         *         total_items: Total de items en toda la colección
         *         total_pages: Total de páginas
         *         has_next: Si hay página siguiente
         *         has_prev: Si hay página anterior
         *         next_page: Número de la página siguiente (None si no hay)
         *         prev_page: Número de la página anterior (None si no hay)
         */
        PaginationMeta: {
            /**
             * Page
             * @description Página actual (1-indexed)
             * @example 1
             * @example 2
             * @example 3
             */
            page: number;
            /**
             * Per Page
             * @description Items por página
             * @example 10
             * @example 20
             * @example 50
             */
            per_page: number;
            /**
             * Total Items
             * @description Total de items en toda la colección
             */
            total_items: number;
            /**
             * Total Pages
             * @description Total de páginas
             */
            total_pages: number;
            /**
             * Has Next
             * @description Si hay página siguiente
             */
            has_next: boolean;
            /**
             * Has Prev
             * @description Si hay página anterior
             */
            has_prev: boolean;
            /**
             * Next Page
             * @description Número de la página siguiente
             */
            next_page?: number | null;
            /**
             * Prev Page
             * @description Número de la página anterior
             */
            prev_page?: number | null;
        };
        /**
         * PrediccionAnomaliaRequest
         * @description Request para detección de anomalías.
         */
        PrediccionAnomaliaRequest: {
            /**
             * Moto Id
             * @description ID de la motocicleta
             */
            moto_id: number;
            /** @description Datos de sensores actuales */
            datos_sensor: components["schemas"]["DatosSensor"];
            /**
             * Datos Historicos
             * @description Datos históricos para comparación
             */
            datos_historicos?: Record<string, never>[] | null;
        };
        /**
         * PrediccionFallaRequest
         * @description Request para predicción de fallas.
         */
        PrediccionFallaRequest: {
            /**
             * Moto Id
             * @description ID de la motocicleta
             */
            moto_id: number;
            /** @description Datos de sensores */
            datos_sensor: components["schemas"]["DatosSensor"];
            /**
             * Kilometraje
             * @description Kilometraje actual
             */
            kilometraje: number;
            /**
             * Dias Ultimo Mantenimiento
             * @description Días desde último mantenimiento
             */
            dias_ultimo_mantenimiento: number;
            /**
             * Historial Fallas
             * @description Historial de fallas previas
             */
            historial_fallas?: string[];
        };
        /**
         * PrediccionResponse
         * @description Response de predicción.
         * @example {
         *       "confianza": 0.92,
         *       "created_at": "2024-01-15T10:30:00",
         *       "descripcion": "Posible falla en sistema de frenos detectada",
         *       "es_critica": true,
         *       "estado": "pendiente",
         *       "id": 1,
         *       "modelo_usado": "fault_predictor",
         *       "moto_id": 5,
         *       "nivel_confianza": "muy_alto",
         *       "probabilidad_falla": 0.88,
         *       "resultados": {
         *         "componente": "frenos",
         *         "severidad": "alta"
         *       },
         *       "tiempo_estimado_dias": 15,
         *       "tipo": "falla",
         *       "version_modelo": "1.0"
         *     }
         */
        PrediccionResponse: {
            /** Id */
            id: number;
            /** Moto Id */
            moto_id: number;
            tipo: components["schemas"]["TipoPrediccionEnum"];
            /** Descripcion */
            descripcion: string;
            /** Confianza */
            confianza: number;
            nivel_confianza: components["schemas"]["NivelConfianzaEnum"];
            /** Probabilidad Falla */
            probabilidad_falla?: number | null;
            /** Tiempo Estimado Dias */
            tiempo_estimado_dias: number | null;
            /** Fecha Estimada */
            fecha_estimada: string | null;
            /** Modelo Usado */
            modelo_usado: string;
            /** Version Modelo */
            version_modelo: string;
            /** Resultados */
            resultados: Record<string, never>;
            estado: components["schemas"]["EstadoPrediccionEnum"];
            /** Es Critica */
            es_critica: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /**
         * PrediccionValidacionRequest
         * @description Request para validar predicción.
         */
        PrediccionValidacionRequest: {
            /**
             * Validada Por
             * @description ID del usuario que valida
             */
            validada_por: number;
            /**
             * Es Correcta
             * @description Si la predicción fue correcta
             */
            es_correcta: boolean;
            /**
             * Notas
             * @description Notas adicionales
             */
            notas?: string | null;
        };
        /**
         * PreferenciaNotificacionResponse
         * @description Schema de respuesta para preferencias de notificaciones.
         */
        PreferenciaNotificacionResponse: {
            /** Id */
            id: number;
            /** Usuario Id */
            usuario_id: number;
            /** In App Habilitado */
            in_app_habilitado: boolean;
            /** Email Habilitado */
            email_habilitado: boolean;
            /** Push Habilitado */
            push_habilitado: boolean;
            /** Sms Habilitado */
            sms_habilitado: boolean;
            /** Notif Fallas Habilitado */
            notif_fallas_habilitado: boolean;
            /** Notif Mantenimiento Habilitado */
            notif_mantenimiento_habilitado: boolean;
            /** Notif Sensores Habilitado */
            notif_sensores_habilitado: boolean;
            /** Notif Sistema Habilitado */
            notif_sistema_habilitado: boolean;
            /** Notif Marketing Habilitado */
            notif_marketing_habilitado: boolean;
            /** No Molestar Inicio */
            no_molestar_inicio?: string | null;
            /** No Molestar Fin */
            no_molestar_fin?: string | null;
            /** Configuracion Adicional */
            configuracion_adicional?: Record<string, never> | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Updated At */
            updated_at?: string | null;
        };
        /**
         * PreferenciaNotificacionUpdate
         * @description Schema para actualizar preferencias de notificaciones.
         */
        PreferenciaNotificacionUpdate: {
            /** In App Habilitado */
            in_app_habilitado?: boolean | null;
            /** Email Habilitado */
            email_habilitado?: boolean | null;
            /** Push Habilitado */
            push_habilitado?: boolean | null;
            /** Sms Habilitado */
            sms_habilitado?: boolean | null;
            /** Notif Fallas Habilitado */
            notif_fallas_habilitado?: boolean | null;
            /** Notif Mantenimiento Habilitado */
            notif_mantenimiento_habilitado?: boolean | null;
            /** Notif Sensores Habilitado */
            notif_sensores_habilitado?: boolean | null;
            /** Notif Sistema Habilitado */
            notif_sistema_habilitado?: boolean | null;
            /** Notif Marketing Habilitado */
            notif_marketing_habilitado?: boolean | null;
            /** No Molestar Inicio */
            no_molestar_inicio?: string | null;
            /** No Molestar Fin */
            no_molestar_fin?: string | null;
            /** Configuracion Adicional */
            configuracion_adicional?: Record<string, never> | null;
        };
        /**
         * RefreshTokenRequest
         * @description Schema para renovar access token con refresh token.
         * @example {
         *       "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
         *     }
         */
        RefreshTokenRequest: {
            /**
             * Refresh Token
             * @description Refresh token
             */
            refresh_token: string;
        };
        /**
         * RegisterMotoRequest
         * @description Request para registrar una nueva moto.
         */
        RegisterMotoRequest: {
            /**
             * Vin
             * @description VIN de 17 caracteres
             */
            vin: string;
            /**
             * Modelo
             * @description Modelo de la moto (ej: Duke 390)
             */
            modelo: string;
            /**
             * Año
             * @description Año de fabricación
             */
            "a\u00F1o": number;
            /**
             * Placa
             * @description Placa de la moto
             */
            placa?: string | null;
            /**
             * Color
             * @description Color de la moto
             */
            color?: string | null;
            /**
             * Kilometraje
             * @description Kilometraje actual
             * @default 0
             */
            kilometraje: number;
            /**
             * Observaciones
             * @description Observaciones adicionales
             */
            observaciones?: string | null;
        };
        /**
         * RegisterRequest
         * @description Schema para registro de nuevo usuario.
         * @example {
         *       "email": "usuario@ejemplo.com",
         *       "nombre": "Juan Pérez",
         *       "password": "MiPassword123",
         *       "telefono": "+573001234567"
         *     }
         */
        RegisterRequest: {
            /**
             * Email
             * Format: email
             * @description Email del usuario
             */
            email: string;
            /**
             * Password
             * @description Contraseña (mínimo 8 caracteres)
             */
            password: string;
            /**
             * Nombre
             * @description Nombre completo
             */
            nombre: string;
            /**
             * Telefono
             * @description Teléfono de contacto
             */
            telefono?: string | null;
        };
        /**
         * RenewSuscripcionRequest
         * @description Request para renovar suscripción premium.
         */
        RenewSuscripcionRequest: {
            /**
             * Duracion Meses
             * @description Duración en meses
             */
            duracion_meses: number;
            /**
             * Precio
             * @description Precio del plan
             */
            precio: number;
            /**
             * Transaction Id
             * @description ID de transacción
             */
            transaction_id: string;
        };
        /**
         * RequestPasswordResetRequest
         * @description Schema para solicitar reset de contraseña.
         * @example {
         *       "email": "usuario@ejemplo.com"
         *     }
         */
        RequestPasswordResetRequest: {
            /**
             * Email
             * Format: email
             * @description Email del usuario
             */
            email: string;
        };
        /**
         * ResetPasswordRequest
         * @description Schema para resetear contraseña con token.
         * @example {
         *       "new_password": "NuevoPassword789",
         *       "token": "abc123def456"
         *     }
         */
        ResetPasswordRequest: {
            /**
             * Token
             * @description Token de reseteo
             */
            token: string;
            /**
             * New Password
             * @description Nueva contraseña
             */
            new_password: string;
        };
        /**
         * SensorResponse
         * @description Response con datos de sensor.
         */
        SensorResponse: {
            /** Id */
            id: number;
            /** Moto Id */
            moto_id: number;
            /** Tipo */
            tipo: string;
            /** Codigo */
            codigo: string;
            /** Nombre */
            nombre: string | null;
            /** Ubicacion */
            ubicacion: string | null;
            /** Estado */
            estado: string;
            /** Frecuencia Lectura */
            frecuencia_lectura: number;
            /** Umbral Min */
            umbral_min: number | null;
            /** Umbral Max */
            umbral_max: number | null;
            /** Fabricante */
            fabricante: string | null;
            /** Modelo */
            modelo: string | null;
            /** Version Firmware */
            version_firmware: string | null;
            /** Ultima Lectura */
            ultima_lectura: string | null;
            /** Ultima Calibracion */
            ultima_calibracion: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * SensorStatsResponse
         * @description Response con estadísticas de sensores.
         */
        SensorStatsResponse: {
            /** Total Sensores */
            total_sensores: number;
            /** Sensores Activos */
            sensores_activos: number;
            /** Sensores Inactivos */
            sensores_inactivos: number;
            /** Sensores Con Error */
            sensores_con_error: number;
            /** Lecturas Hoy */
            lecturas_hoy: number;
            /** Alertas Hoy */
            alertas_hoy: number;
            /** Ultimas Lecturas */
            ultimas_lecturas: components["schemas"]["LecturaSensorResponse"][];
        };
        /** SuccessResponse[NoneType] */
        SuccessResponse_NoneType_: {
            /**
             * Success
             * @description Siempre True en respuestas exitosas
             * @default true
             */
            success: boolean;
            /**
             * Message
             * @description Mensaje de éxito
             * @example Creado exitosamente
             * @example Actualizado correctamente
             */
            message: string;
            /**
             * Data
             * @description Datos opcionales de la respuesta
             */
            data?: null;
        };
        /**
         * SuscripcionResponse
         * @description Response con información completa de una suscripción.
         */
        SuscripcionResponse: {
            /** Id */
            id: number;
            /** Usuario Id */
            usuario_id: number;
            /** Plan */
            plan: string;
            /** Status */
            status: string;
            /**
             * Start Date
             * Format: date-time
             */
            start_date: string;
            /** End Date */
            end_date: string | null;
            /** Cancelled At */
            cancelled_at: string | null;
            /** Precio */
            precio: number | null;
            /** Metodo Pago */
            metodo_pago: string | null;
            /** Transaction Id */
            transaction_id: string | null;
            /** Auto Renovacion */
            auto_renovacion: boolean;
            /** Notas */
            notas: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Deleted At */
            deleted_at: string | null;
            /** Is Active */
            is_active?: boolean | null;
            /** Is Premium */
            is_premium?: boolean | null;
            /** Is Freemium */
            is_freemium?: boolean | null;
            /** Dias Restantes */
            dias_restantes?: number | null;
        };
        /**
         * SuscripcionStatsResponse
         * @description Response con estadísticas de suscripciones.
         */
        SuscripcionStatsResponse: {
            /** Total Suscripciones */
            total_suscripciones: number;
            /** Suscripciones Activas */
            suscripciones_activas: number;
            /** Suscripciones Freemium */
            suscripciones_freemium: number;
            /** Suscripciones Premium */
            suscripciones_premium: number;
            /** Ingresos Totales */
            ingresos_totales: number;
            /** Tasa Conversion */
            tasa_conversion: number;
        };
        /**
         * TipoMantenimiento
         * @description Tipos de mantenimiento.
         * @enum {string}
         */
        TipoMantenimiento: "cambio_aceite" | "cambio_filtro_aire" | "cambio_llantas" | "revision_frenos" | "ajuste_cadena" | "revision_general" | "cambio_bateria" | "cambio_bujias";
        /**
         * TipoNotificacion
         * @description Tipos de notificaciones del sistema.
         * @enum {string}
         */
        TipoNotificacion: "info" | "warning" | "alert" | "success" | "error";
        /**
         * TipoPrediccionEnum
         * @description Tipos de predicciones.
         * @enum {string}
         */
        TipoPrediccionEnum: "falla" | "anomalia" | "mantenimiento" | "desgaste";
        /**
         * TokenResponse
         * @description Schema para respuesta con tokens JWT.
         * @example {
         *       "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *       "expires_in": 3600,
         *       "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
         *       "token_type": "bearer"
         *     }
         */
        TokenResponse: {
            /**
             * Access Token
             * @description Access token JWT
             */
            access_token: string;
            /**
             * Refresh Token
             * @description Refresh token
             */
            refresh_token: string;
            /**
             * Token Type
             * @description Tipo de token
             * @default bearer
             */
            token_type: string;
            /**
             * Expires In
             * @description Segundos hasta expiración
             */
            expires_in: number;
        };
        /**
         * TokenValidationResponse
         * @description Schema para respuesta de validación de token.
         * @example {
         *       "email": "usuario@ejemplo.com",
         *       "expires_at": "2025-10-07T11:30:00",
         *       "user_id": "123e4567-e89b-12d3-a456-426614174000",
         *       "valid": true
         *     }
         */
        TokenValidationResponse: {
            /**
             * Valid
             * @description Si el token es válido
             */
            valid: boolean;
            /**
             * User Id
             * @description ID del usuario
             */
            user_id?: string | null;
            /**
             * Email
             * @description Email del usuario
             */
            email?: string | null;
            /**
             * Expires At
             * @description Fecha de expiración
             */
            expires_at?: string | null;
        };
        /**
         * UpdateKilometrajeRequest
         * @description Request para actualizar solo el kilometraje.
         */
        UpdateKilometrajeRequest: {
            /**
             * Kilometraje
             * @description Nuevo kilometraje
             */
            kilometraje: number;
        };
        /**
         * UpdateMotoRequest
         * @description Request para actualizar una moto (actualización parcial).
         */
        UpdateMotoRequest: {
            /**
             * Placa
             * @description Nueva placa
             */
            placa?: string | null;
            /**
             * Color
             * @description Nuevo color
             */
            color?: string | null;
            /**
             * Kilometraje
             * @description Nuevo kilometraje
             */
            kilometraje?: number | null;
            /**
             * Observaciones
             * @description Nuevas observaciones
             */
            observaciones?: string | null;
        };
        /**
         * UpdateProfileRequest
         * @description Schema para actualizar perfil de usuario.
         * @example {
         *       "nombre": "Juan Carlos Pérez",
         *       "telefono": "+573009876543"
         *     }
         */
        UpdateProfileRequest: {
            /**
             * Nombre
             * @description Nombre completo
             */
            nombre?: string | null;
            /**
             * Telefono
             * @description Teléfono de contacto
             */
            telefono?: string | null;
        };
        /**
         * UpdateUsuarioRequest
         * @description Schema para actualizar usuario (admin only).
         * @example {
         *       "activo": true,
         *       "nombre": "María García López",
         *       "telefono": "+573009876543"
         *     }
         */
        UpdateUsuarioRequest: {
            /**
             * Nombre
             * @description Nombre completo
             */
            nombre?: string | null;
            /**
             * Telefono
             * @description Teléfono de contacto
             */
            telefono?: string | null;
            /**
             * Rol
             * @description Rol del usuario (user/admin)
             */
            rol?: string | null;
            /**
             * Activo
             * @description Si la cuenta está activa
             */
            activo?: boolean | null;
        };
        /**
         * UpgradeToPremiumRequest
         * @description Request para upgrade a premium.
         */
        UpgradeToPremiumRequest: {
            /**
             * Duracion Meses
             * @description Duración en meses
             */
            duracion_meses: number;
            /**
             * Precio
             * @description Precio del plan
             */
            precio: number;
            /**
             * Metodo Pago
             * @description Método de pago
             */
            metodo_pago: string;
            /**
             * Transaction Id
             * @description ID de transacción
             */
            transaction_id: string;
            /**
             * Auto Renovacion
             * @description Auto-renovación
             * @default false
             */
            auto_renovacion: boolean;
        };
        /**
         * UserResponse
         * @description Schema para respuesta con datos de usuario.
         * @example {
         *       "activo": true,
         *       "created_at": "2025-10-01T08:00:00",
         *       "email": "usuario@ejemplo.com",
         *       "email_verificado": true,
         *       "es_admin": false,
         *       "id": "123e4567-e89b-12d3-a456-426614174000",
         *       "nombre": "Juan Pérez",
         *       "telefono": "+573001234567",
         *       "ultimo_login": "2025-10-07T10:30:00",
         *       "updated_at": "2025-10-07T10:30:00"
         *     }
         */
        UserResponse: {
            /**
             * Id
             * @description ID del usuario
             */
            id: string;
            /**
             * Email
             * @description Email del usuario
             */
            email: string;
            /**
             * Nombre
             * @description Nombre completo
             */
            nombre: string;
            /**
             * Telefono
             * @description Teléfono
             */
            telefono?: string | null;
            /**
             * Email Verificado
             * @description Email verificado
             */
            email_verificado: boolean;
            /**
             * Activo
             * @description Cuenta activa
             */
            activo: boolean;
            /**
             * Rol
             * @description Rol del usuario (user/admin)
             */
            rol: string;
            /**
             * Ultimo Login
             * @description Último login
             */
            ultimo_login?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Fecha de creación
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Última actualización
             */
            updated_at: string;
        };
        /**
         * UsuarioBasicInfo
         * @description Información básica del usuario (para incluir en respuesta de moto).
         */
        UsuarioBasicInfo: {
            /** Id */
            id: number;
            /** Nombre */
            nombre: string;
            /** Apellido */
            apellido: string;
            /** Email */
            email: string;
        };
        /**
         * UsuarioResponse
         * @description Schema para respuesta con datos de usuario.
         * @example {
         *       "activo": true,
         *       "created_at": "2025-10-01T08:00:00",
         *       "email": "usuario@ejemplo.com",
         *       "email_verificado": true,
         *       "id": "123e4567-e89b-12d3-a456-426614174000",
         *       "nombre": "Juan Pérez",
         *       "rol": "user",
         *       "telefono": "+573001234567",
         *       "ultimo_login": "2025-10-07T10:30:00",
         *       "updated_at": "2025-10-07T10:30:00"
         *     }
         */
        UsuarioResponse: {
            /**
             * Id
             * @description ID del usuario
             */
            id: string;
            /**
             * Email
             * @description Email del usuario
             */
            email: string;
            /**
             * Nombre
             * @description Nombre completo
             */
            nombre: string;
            /**
             * Telefono
             * @description Teléfono
             */
            telefono?: string | null;
            /**
             * Email Verificado
             * @description Email verificado
             */
            email_verificado: boolean;
            /**
             * Activo
             * @description Cuenta activa
             */
            activo: boolean;
            /**
             * Rol
             * @description Rol del usuario (user/admin)
             */
            rol: string;
            /**
             * Ultimo Login
             * @description Último login
             */
            ultimo_login?: string | null;
            /**
             * Created At
             * Format: date-time
             * @description Fecha de creación
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Última actualización
             */
            updated_at: string;
        };
        /**
         * UsuarioStatsResponse
         * @description Schema para estadísticas de usuarios.
         * @example {
         *       "administradores": 5,
         *       "emails_sin_verificar": 50,
         *       "emails_verificados": 100,
         *       "total_usuarios": 150,
         *       "usuarios_activos": 120,
         *       "usuarios_inactivos": 30,
         *       "usuarios_recientes": 10
         *     }
         */
        UsuarioStatsResponse: {
            /**
             * Total Usuarios
             * @description Total de usuarios
             */
            total_usuarios: number;
            /**
             * Usuarios Activos
             * @description Usuarios activos
             */
            usuarios_activos: number;
            /**
             * Usuarios Inactivos
             * @description Usuarios inactivos
             */
            usuarios_inactivos: number;
            /**
             * Emails Verificados
             * @description Emails verificados
             */
            emails_verificados: number;
            /**
             * Emails Sin Verificar
             * @description Emails sin verificar
             */
            emails_sin_verificar: number;
            /**
             * Administradores
             * @description Total de admins
             */
            administradores: number;
            /**
             * Usuarios Recientes
             * @description Usuarios registrados últimos 7 días
             */
            usuarios_recientes: number;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * VerifyEmailRequest
         * @description Schema para verificar email con token.
         * @example {
         *       "token": "xyz789abc123"
         *     }
         */
        VerifyEmailRequest: {
            /**
             * Token
             * @description Token de verificación
             */
            token: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    register_api_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_api_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    refresh_token_api_auth_refresh_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_api_auth_logout_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    change_password_api_auth_change_password_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    request_password_reset_api_auth_request_password_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestPasswordResetRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_password_api_auth_reset_password_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_email_api_auth_verify_email_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyEmailRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_current_user_api_auth_me_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_UserResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_profile_api_auth_me_patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_UserResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_token_api_auth_validate_token_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenValidationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_usuarios_api_usuarios_get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                rol?: string | null;
                activo?: boolean | null;
                email_verificado?: boolean | null;
                page?: number;
                per_page?: number;
            };
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_UsuarioResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_usuario_api_usuarios_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUsuarioRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_UsuarioResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_usuario_stats_api_usuarios_stats_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_UsuarioStatsResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_usuario_api_usuarios__usuario_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                usuario_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_UsuarioResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_usuario_api_usuarios__usuario_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                usuario_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_usuario_api_usuarios__usuario_id__patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                usuario_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUsuarioRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_UsuarioResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    deactivate_usuario_api_usuarios__usuario_id__deactivate_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                usuario_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    activate_usuario_api_usuarios__usuario_id__activate_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                usuario_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_motos_api_motos__get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                usuario_id?: number | null;
                modelo?: string | null;
                "a\u00F1o_desde"?: number | null;
                "a\u00F1o_hasta"?: number | null;
                vin?: string | null;
                placa?: string | null;
                order_by?: "id" | "created_at" | "año" | "kilometraje" | "modelo";
                order_direction?: "asc" | "desc";
                page?: number;
                per_page?: number;
            };
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_MotoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_moto_api_motos__post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterMotoRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MotoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_moto_stats_api_motos_stats_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MotoStatsResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_moto_api_motos__moto_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                moto_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MotoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_moto_api_motos__moto_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                moto_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_moto_api_motos__moto_id__patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                moto_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMotoRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MotoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_kilometraje_api_motos__moto_id__kilometraje_patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                moto_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateKilometrajeRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MotoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_suscripciones_api_suscripciones__get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                usuario_id?: number | null;
                plan?: string | null;
                status?: string | null;
                activas_only?: boolean;
                order_by?: "id" | "created_at" | "start_date" | "end_date";
                order_direction?: "asc" | "desc";
                page?: number;
                per_page?: number;
            };
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_SuscripcionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_suscripcion_api_suscripciones__post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSuscripcionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SuscripcionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_my_suscripcion_api_suscripciones_me_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SuscripcionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_suscripcion_stats_api_suscripciones_stats_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SuscripcionStatsResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_suscripcion_api_suscripciones__suscripcion_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                suscripcion_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SuscripcionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upgrade_to_premium_api_suscripciones_upgrade_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpgradeToPremiumRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SuscripcionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    cancel_suscripcion_api_suscripciones_cancel_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CancelSuscripcionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    renew_suscripcion_api_suscripciones_renew_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RenewSuscripcionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SuscripcionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_sensor_api_sensores__post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSensorRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SensorResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_lectura_api_sensores_lecturas_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLecturaRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_LecturaSensorResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_stats_api_sensores_stats_get: {
        parameters: {
            query?: {
                moto_id?: number | null;
            };
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_SensorStatsResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_falla_api_fallas__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FallaCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_FallaResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_falla_ml_api_fallas_ml_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FallaMLCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_FallaResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_falla_api_fallas__falla_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                falla_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_FallaResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_falla_api_fallas__falla_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                falla_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_falla_api_fallas__falla_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                falla_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FallaUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_FallaResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_fallas_by_moto_api_fallas_moto__moto_id__get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                tipo?: string | null;
                severidad?: string | null;
                estado?: string | null;
                origen_deteccion?: string | null;
                solo_activas?: boolean | null;
                solo_criticas?: boolean | null;
                requiere_atencion_inmediata?: boolean | null;
                fecha_desde?: string | null;
                fecha_hasta?: string | null;
                page?: number;
                per_page?: number;
            };
            header?: never;
            path: {
                moto_id: number | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_FallaResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    diagnosticar_falla_api_fallas__falla_id__diagnosticar_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                falla_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FallaDiagnosticar"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_FallaResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resolver_falla_api_fallas__falla_id__resolver_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                falla_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FallaResolver"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_FallaResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_falla_stats_api_fallas_moto__moto_id__stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                moto_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_FallaStatsResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_mantenimiento_api_mantenimiento__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MantenimientoCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MantenimientoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_mantenimiento_ml_api_mantenimiento_ml_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MantenimientoMLCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MantenimientoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mantenimiento_api_mantenimiento__mantenimiento_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mantenimiento_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MantenimientoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_mantenimiento_api_mantenimiento__mantenimiento_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mantenimiento_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_mantenimiento_api_mantenimiento__mantenimiento_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mantenimiento_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MantenimientoUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MantenimientoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_mantenimientos_by_moto_api_mantenimiento_moto__moto_id__get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                tipo?: components["schemas"]["TipoMantenimiento"] | null;
                estado?: components["schemas"]["EstadoMantenimiento"] | null;
                es_preventivo?: boolean | null;
                es_urgente?: boolean | null;
                solo_activos?: boolean | null;
                solo_vencidos?: boolean | null;
                fecha_desde?: string | null;
                fecha_hasta?: string | null;
                recomendado_por_ia?: boolean | null;
                page?: number;
                per_page?: number;
            };
            header?: never;
            path: {
                moto_id: number | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_MantenimientoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    iniciar_mantenimiento_api_mantenimiento__mantenimiento_id__iniciar_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mantenimiento_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MantenimientoIniciar"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MantenimientoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    completar_mantenimiento_api_mantenimiento__mantenimiento_id__completar_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                mantenimiento_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MantenimientoCompletar"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MantenimientoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_mantenimiento_stats_api_mantenimiento_moto__moto_id__stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                moto_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MantenimientoStatsResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    predecir_falla_api_ml_predict_fault_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrediccionFallaRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PrediccionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    detectar_anomalia_api_ml_predict_anomaly_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrediccionAnomaliaRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_Union_PrediccionResponse__NoneType__"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validar_prediccion_api_ml_predictions__prediccion_id__validate_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                prediccion_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrediccionValidacionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PrediccionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    obtener_predicciones_moto_api_ml_predictions_moto__moto_id__get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                usuario_id?: number | null;
                tipo?: components["schemas"]["TipoPrediccionEnum"] | null;
                estado?: components["schemas"]["EstadoPrediccionEnum"] | null;
                es_critica?: boolean | null;
                confianza_minima?: number | null;
                page?: number;
                per_page?: number;
            };
            header?: never;
            path: {
                moto_id: number | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_PrediccionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    obtener_predicciones_usuario_api_ml_predictions_usuario__usuario_id__get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                moto_id?: number | null;
                tipo?: components["schemas"]["TipoPrediccionEnum"] | null;
                estado?: components["schemas"]["EstadoPrediccionEnum"] | null;
                es_critica?: boolean | null;
                confianza_minima?: number | null;
                page?: number;
                per_page?: number;
            };
            header?: never;
            path: {
                usuario_id: number | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_PrediccionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    obtener_predicciones_criticas_api_ml_predictions_criticas_get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                moto_id?: number | null;
                usuario_id?: number | null;
                tipo?: components["schemas"]["TipoPrediccionEnum"] | null;
                estado?: components["schemas"]["EstadoPrediccionEnum"] | null;
                es_critica?: boolean | null;
                confianza_minima?: number | null;
                page?: number;
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_PrediccionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    obtener_estadisticas_api_ml_statistics_get: {
        parameters: {
            query?: {
                moto_id?: number | null;
                usuario_id?: number | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_EstadisticasPrediccionesResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    obtener_info_modelo_api_ml_models__nombre_modelo__info_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                nombre_modelo: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ModeloInfoResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    estado_modelos_api_ml_models_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_Dict_str__Any__"];
                };
            };
        };
    };
    create_conversacion_api_chatbot__post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConversacionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ConversacionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_message_api_chatbot_chat_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ChatResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_message_stream_api_chatbot_chat_stream_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChatRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_conversacion_api_chatbot__conversation_id__get: {
        parameters: {
            query?: {
                /** @description Límite de mensajes */
                limit?: number;
            };
            header?: {
                authorization?: string | null;
            };
            path: {
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ConversacionWithMessagesResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_conversacion_api_chatbot__conversation_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_conversaciones_api_chatbot_usuario__usuario_id__get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                moto_id?: number | null;
                nivel_acceso?: string | null;
                solo_activas?: boolean | null;
                fecha_desde?: string | null;
                fecha_hasta?: string | null;
                page?: number;
                per_page?: number;
            };
            header?: {
                authorization?: string | null;
            };
            path: {
                usuario_id: number | null;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_ConversacionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_feedback_api_chatbot_messages__mensaje_id__feedback_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                mensaje_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MensajeFeedback"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_MensajeResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    clear_history_api_chatbot__conversation_id__history_delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                conversation_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_stats_api_chatbot_stats_summary_get: {
        parameters: {
            query?: {
                /** @description ID del usuario (None para stats globales) */
                usuario_id?: number | null;
            };
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_ConversacionStatsResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    obtener_notificaciones_api_notificaciones_get: {
        parameters: {
            query?: {
                search?: string | null;
                created_after?: string | null;
                created_before?: string | null;
                solo_no_leidas?: boolean | null;
                tipo?: components["schemas"]["TipoNotificacion"] | null;
                canal?: components["schemas"]["CanalNotificacion"] | null;
                estado?: components["schemas"]["EstadoNotificacion"] | null;
                referencia_tipo?: string | null;
                referencia_id?: number | null;
                page?: number;
                per_page?: number;
            };
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_NotificacionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    crear_notificacion_api_notificaciones_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificacionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_NotificacionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    crear_notificacion_masiva_api_notificaciones_masiva_post: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotificacionMasivaCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_NotificacionMasivaResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    obtener_notificacion_api_notificaciones__notificacion_id__get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                notificacion_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_NotificacionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    eliminar_notificacion_api_notificaciones__notificacion_id__delete: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path: {
                notificacion_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    marcar_como_leidas_api_notificaciones_leer_patch: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MarcarLeidaRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SuccessResponse_NoneType_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    obtener_estadisticas_api_notificaciones_stats_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_NotificacionStatsResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    obtener_preferencias_api_notificaciones_preferencias_get: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PreferenciaNotificacionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    actualizar_preferencias_api_notificaciones_preferencias_put: {
        parameters: {
            query?: never;
            header?: {
                authorization?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PreferenciaNotificacionUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponse_PreferenciaNotificacionResponse_"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    root__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    health_check_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    api_status_api_status_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
}
