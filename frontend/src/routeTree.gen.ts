/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteRouteImport } from './routes/app/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppIndexRouteImport } from './routes/app/index'
import { Route as AppNotificacionesRouteImport } from './routes/app/notificaciones'
import { Route as AppHistorialRouteImport } from './routes/app/historial'
import { Route as AppGarajeRouteImport } from './routes/app/garaje'
import { Route as AppDiagnosticoRouteImport } from './routes/app/diagnostico'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRouteRoute = AppRouteRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppNotificacionesRoute = AppNotificacionesRouteImport.update({
  id: '/notificaciones',
  path: '/notificaciones',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppHistorialRoute = AppHistorialRouteImport.update({
  id: '/historial',
  path: '/historial',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppGarajeRoute = AppGarajeRouteImport.update({
  id: '/garaje',
  path: '/garaje',
  getParentRoute: () => AppRouteRoute,
} as any)
const AppDiagnosticoRoute = AppDiagnosticoRouteImport.update({
  id: '/diagnostico',
  path: '/diagnostico',
  getParentRoute: () => AppRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/app/diagnostico': typeof AppDiagnosticoRoute
  '/app/garaje': typeof AppGarajeRoute
  '/app/historial': typeof AppHistorialRoute
  '/app/notificaciones': typeof AppNotificacionesRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/app/diagnostico': typeof AppDiagnosticoRoute
  '/app/garaje': typeof AppGarajeRoute
  '/app/historial': typeof AppHistorialRoute
  '/app/notificaciones': typeof AppNotificacionesRoute
  '/app': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/app': typeof AppRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/app/diagnostico': typeof AppDiagnosticoRoute
  '/app/garaje': typeof AppGarajeRoute
  '/app/historial': typeof AppHistorialRoute
  '/app/notificaciones': typeof AppNotificacionesRoute
  '/app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/login'
    | '/register'
    | '/app/diagnostico'
    | '/app/garaje'
    | '/app/historial'
    | '/app/notificaciones'
    | '/app/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/app/diagnostico'
    | '/app/garaje'
    | '/app/historial'
    | '/app/notificaciones'
    | '/app'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/login'
    | '/register'
    | '/app/diagnostico'
    | '/app/garaje'
    | '/app/historial'
    | '/app/notificaciones'
    | '/app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/notificaciones': {
      id: '/app/notificaciones'
      path: '/notificaciones'
      fullPath: '/app/notificaciones'
      preLoaderRoute: typeof AppNotificacionesRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/historial': {
      id: '/app/historial'
      path: '/historial'
      fullPath: '/app/historial'
      preLoaderRoute: typeof AppHistorialRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/garaje': {
      id: '/app/garaje'
      path: '/garaje'
      fullPath: '/app/garaje'
      preLoaderRoute: typeof AppGarajeRouteImport
      parentRoute: typeof AppRouteRoute
    }
    '/app/diagnostico': {
      id: '/app/diagnostico'
      path: '/diagnostico'
      fullPath: '/app/diagnostico'
      preLoaderRoute: typeof AppDiagnosticoRouteImport
      parentRoute: typeof AppRouteRoute
    }
  }
}

interface AppRouteRouteChildren {
  AppDiagnosticoRoute: typeof AppDiagnosticoRoute
  AppGarajeRoute: typeof AppGarajeRoute
  AppHistorialRoute: typeof AppHistorialRoute
  AppNotificacionesRoute: typeof AppNotificacionesRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppDiagnosticoRoute: AppDiagnosticoRoute,
  AppGarajeRoute: AppGarajeRoute,
  AppHistorialRoute: AppHistorialRoute,
  AppNotificacionesRoute: AppNotificacionesRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
